//*
// LogStore Client

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: logstore.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LogStore_AddEntry_FullMethodName  = "/woodpecker.proto.logstore.LogStore/AddEntry"
	LogStore_ReadEntry_FullMethodName = "/woodpecker.proto.logstore.LogStore/ReadEntry"
)

// LogStoreClient is the client API for LogStore service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// *
// LogStore service.
type LogStoreClient interface {
	// *
	// Add a new entry to the log store
	AddEntry(ctx context.Context, in *AddEntryRequest, opts ...grpc.CallOption) (*AddEntryResponse, error)
	// *
	// Read an entry from the log store
	ReadEntry(ctx context.Context, in *ReadEntryRequest, opts ...grpc.CallOption) (*ReadEntryResponse, error)
}

type logStoreClient struct {
	cc grpc.ClientConnInterface
}

func NewLogStoreClient(cc grpc.ClientConnInterface) LogStoreClient {
	return &logStoreClient{cc}
}

func (c *logStoreClient) AddEntry(ctx context.Context, in *AddEntryRequest, opts ...grpc.CallOption) (*AddEntryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddEntryResponse)
	err := c.cc.Invoke(ctx, LogStore_AddEntry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logStoreClient) ReadEntry(ctx context.Context, in *ReadEntryRequest, opts ...grpc.CallOption) (*ReadEntryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReadEntryResponse)
	err := c.cc.Invoke(ctx, LogStore_ReadEntry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LogStoreServer is the server API for LogStore service.
// All implementations should embed UnimplementedLogStoreServer
// for forward compatibility.
//
// *
// LogStore service.
type LogStoreServer interface {
	// *
	// Add a new entry to the log store
	AddEntry(context.Context, *AddEntryRequest) (*AddEntryResponse, error)
	// *
	// Read an entry from the log store
	ReadEntry(context.Context, *ReadEntryRequest) (*ReadEntryResponse, error)
}

// UnimplementedLogStoreServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLogStoreServer struct{}

func (UnimplementedLogStoreServer) AddEntry(context.Context, *AddEntryRequest) (*AddEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddEntry not implemented")
}
func (UnimplementedLogStoreServer) ReadEntry(context.Context, *ReadEntryRequest) (*ReadEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadEntry not implemented")
}
func (UnimplementedLogStoreServer) testEmbeddedByValue() {}

// UnsafeLogStoreServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LogStoreServer will
// result in compilation errors.
type UnsafeLogStoreServer interface {
	mustEmbedUnimplementedLogStoreServer()
}

func RegisterLogStoreServer(s grpc.ServiceRegistrar, srv LogStoreServer) {
	// If the following call pancis, it indicates UnimplementedLogStoreServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LogStore_ServiceDesc, srv)
}

func _LogStore_AddEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogStoreServer).AddEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LogStore_AddEntry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogStoreServer).AddEntry(ctx, req.(*AddEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LogStore_ReadEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogStoreServer).ReadEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LogStore_ReadEntry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogStoreServer).ReadEntry(ctx, req.(*ReadEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LogStore_ServiceDesc is the grpc.ServiceDesc for LogStore service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LogStore_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "woodpecker.proto.logstore.LogStore",
	HandlerType: (*LogStoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddEntry",
			Handler:    _LogStore_AddEntry_Handler,
		},
		{
			MethodName: "ReadEntry",
			Handler:    _LogStore_ReadEntry_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "logstore.proto",
}
