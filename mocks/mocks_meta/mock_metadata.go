// Code generated by mockery v2.46.0. DO NOT EDIT.

package mocks_meta

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	proto "github.com/zilliztech/woodpecker/proto"
)

// MetadataProvider is an autogenerated mock type for the MetadataProvider type
type MetadataProvider struct {
	mock.Mock
}

type MetadataProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MetadataProvider) EXPECT() *MetadataProvider_Expecter {
	return &MetadataProvider_Expecter{mock: &_m.Mock}
}

// AcquireLogWriterLock provides a mock function with given fields: ctx, logName
func (_m *MetadataProvider) AcquireLogWriterLock(ctx context.Context, logName string) error {
	ret := _m.Called(ctx, logName)

	if len(ret) == 0 {
		panic("no return value specified for AcquireLogWriterLock")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, logName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MetadataProvider_AcquireLogWriterLock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AcquireLogWriterLock'
type MetadataProvider_AcquireLogWriterLock_Call struct {
	*mock.Call
}

// AcquireLogWriterLock is a helper method to define mock.On call
//   - ctx context.Context
//   - logName string
func (_e *MetadataProvider_Expecter) AcquireLogWriterLock(ctx interface{}, logName interface{}) *MetadataProvider_AcquireLogWriterLock_Call {
	return &MetadataProvider_AcquireLogWriterLock_Call{Call: _e.mock.On("AcquireLogWriterLock", ctx, logName)}
}

func (_c *MetadataProvider_AcquireLogWriterLock_Call) Run(run func(ctx context.Context, logName string)) *MetadataProvider_AcquireLogWriterLock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MetadataProvider_AcquireLogWriterLock_Call) Return(_a0 error) *MetadataProvider_AcquireLogWriterLock_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MetadataProvider_AcquireLogWriterLock_Call) RunAndReturn(run func(context.Context, string) error) *MetadataProvider_AcquireLogWriterLock_Call {
	_c.Call.Return(run)
	return _c
}

// CheckExists provides a mock function with given fields: ctx, logName
func (_m *MetadataProvider) CheckExists(ctx context.Context, logName string) (bool, error) {
	ret := _m.Called(ctx, logName)

	if len(ret) == 0 {
		panic("no return value specified for CheckExists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (bool, error)); ok {
		return rf(ctx, logName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, logName)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, logName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MetadataProvider_CheckExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckExists'
type MetadataProvider_CheckExists_Call struct {
	*mock.Call
}

// CheckExists is a helper method to define mock.On call
//   - ctx context.Context
//   - logName string
func (_e *MetadataProvider_Expecter) CheckExists(ctx interface{}, logName interface{}) *MetadataProvider_CheckExists_Call {
	return &MetadataProvider_CheckExists_Call{Call: _e.mock.On("CheckExists", ctx, logName)}
}

func (_c *MetadataProvider_CheckExists_Call) Run(run func(ctx context.Context, logName string)) *MetadataProvider_CheckExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MetadataProvider_CheckExists_Call) Return(_a0 bool, _a1 error) *MetadataProvider_CheckExists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MetadataProvider_CheckExists_Call) RunAndReturn(run func(context.Context, string) (bool, error)) *MetadataProvider_CheckExists_Call {
	_c.Call.Return(run)
	return _c
}

// CheckSegmentExists provides a mock function with given fields: ctx, name, i
func (_m *MetadataProvider) CheckSegmentExists(ctx context.Context, name string, i int64) (bool, error) {
	ret := _m.Called(ctx, name, i)

	if len(ret) == 0 {
		panic("no return value specified for CheckSegmentExists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) (bool, error)); ok {
		return rf(ctx, name, i)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) bool); ok {
		r0 = rf(ctx, name, i)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int64) error); ok {
		r1 = rf(ctx, name, i)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MetadataProvider_CheckSegmentExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckSegmentExists'
type MetadataProvider_CheckSegmentExists_Call struct {
	*mock.Call
}

// CheckSegmentExists is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - i int64
func (_e *MetadataProvider_Expecter) CheckSegmentExists(ctx interface{}, name interface{}, i interface{}) *MetadataProvider_CheckSegmentExists_Call {
	return &MetadataProvider_CheckSegmentExists_Call{Call: _e.mock.On("CheckSegmentExists", ctx, name, i)}
}

func (_c *MetadataProvider_CheckSegmentExists_Call) Run(run func(ctx context.Context, name string, i int64)) *MetadataProvider_CheckSegmentExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int64))
	})
	return _c
}

func (_c *MetadataProvider_CheckSegmentExists_Call) Return(_a0 bool, _a1 error) *MetadataProvider_CheckSegmentExists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MetadataProvider_CheckSegmentExists_Call) RunAndReturn(run func(context.Context, string, int64) (bool, error)) *MetadataProvider_CheckSegmentExists_Call {
	_c.Call.Return(run)
	return _c
}

// Close provides a mock function with given fields:
func (_m *MetadataProvider) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MetadataProvider_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MetadataProvider_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MetadataProvider_Expecter) Close() *MetadataProvider_Close_Call {
	return &MetadataProvider_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MetadataProvider_Close_Call) Run(run func()) *MetadataProvider_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MetadataProvider_Close_Call) Return(_a0 error) *MetadataProvider_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MetadataProvider_Close_Call) RunAndReturn(run func() error) *MetadataProvider_Close_Call {
	_c.Call.Return(run)
	return _c
}

// CreateLog provides a mock function with given fields: ctx, logName
func (_m *MetadataProvider) CreateLog(ctx context.Context, logName string) error {
	ret := _m.Called(ctx, logName)

	if len(ret) == 0 {
		panic("no return value specified for CreateLog")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, logName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MetadataProvider_CreateLog_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateLog'
type MetadataProvider_CreateLog_Call struct {
	*mock.Call
}

// CreateLog is a helper method to define mock.On call
//   - ctx context.Context
//   - logName string
func (_e *MetadataProvider_Expecter) CreateLog(ctx interface{}, logName interface{}) *MetadataProvider_CreateLog_Call {
	return &MetadataProvider_CreateLog_Call{Call: _e.mock.On("CreateLog", ctx, logName)}
}

func (_c *MetadataProvider_CreateLog_Call) Run(run func(ctx context.Context, logName string)) *MetadataProvider_CreateLog_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MetadataProvider_CreateLog_Call) Return(_a0 error) *MetadataProvider_CreateLog_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MetadataProvider_CreateLog_Call) RunAndReturn(run func(context.Context, string) error) *MetadataProvider_CreateLog_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllSegmentMetadata provides a mock function with given fields: _a0, _a1
func (_m *MetadataProvider) GetAllSegmentMetadata(_a0 context.Context, _a1 string) (map[int64]*proto.SegmentMetadata, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetAllSegmentMetadata")
	}

	var r0 map[int64]*proto.SegmentMetadata
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (map[int64]*proto.SegmentMetadata, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) map[int64]*proto.SegmentMetadata); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[int64]*proto.SegmentMetadata)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MetadataProvider_GetAllSegmentMetadata_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllSegmentMetadata'
type MetadataProvider_GetAllSegmentMetadata_Call struct {
	*mock.Call
}

// GetAllSegmentMetadata is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
func (_e *MetadataProvider_Expecter) GetAllSegmentMetadata(_a0 interface{}, _a1 interface{}) *MetadataProvider_GetAllSegmentMetadata_Call {
	return &MetadataProvider_GetAllSegmentMetadata_Call{Call: _e.mock.On("GetAllSegmentMetadata", _a0, _a1)}
}

func (_c *MetadataProvider_GetAllSegmentMetadata_Call) Run(run func(_a0 context.Context, _a1 string)) *MetadataProvider_GetAllSegmentMetadata_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MetadataProvider_GetAllSegmentMetadata_Call) Return(_a0 map[int64]*proto.SegmentMetadata, _a1 error) *MetadataProvider_GetAllSegmentMetadata_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MetadataProvider_GetAllSegmentMetadata_Call) RunAndReturn(run func(context.Context, string) (map[int64]*proto.SegmentMetadata, error)) *MetadataProvider_GetAllSegmentMetadata_Call {
	_c.Call.Return(run)
	return _c
}

// GetLogMeta provides a mock function with given fields: ctx, logName
func (_m *MetadataProvider) GetLogMeta(ctx context.Context, logName string) (*proto.LogMeta, error) {
	ret := _m.Called(ctx, logName)

	if len(ret) == 0 {
		panic("no return value specified for GetLogMeta")
	}

	var r0 *proto.LogMeta
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*proto.LogMeta, error)); ok {
		return rf(ctx, logName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *proto.LogMeta); ok {
		r0 = rf(ctx, logName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.LogMeta)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, logName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MetadataProvider_GetLogMeta_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLogMeta'
type MetadataProvider_GetLogMeta_Call struct {
	*mock.Call
}

// GetLogMeta is a helper method to define mock.On call
//   - ctx context.Context
//   - logName string
func (_e *MetadataProvider_Expecter) GetLogMeta(ctx interface{}, logName interface{}) *MetadataProvider_GetLogMeta_Call {
	return &MetadataProvider_GetLogMeta_Call{Call: _e.mock.On("GetLogMeta", ctx, logName)}
}

func (_c *MetadataProvider_GetLogMeta_Call) Run(run func(ctx context.Context, logName string)) *MetadataProvider_GetLogMeta_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MetadataProvider_GetLogMeta_Call) Return(_a0 *proto.LogMeta, _a1 error) *MetadataProvider_GetLogMeta_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MetadataProvider_GetLogMeta_Call) RunAndReturn(run func(context.Context, string) (*proto.LogMeta, error)) *MetadataProvider_GetLogMeta_Call {
	_c.Call.Return(run)
	return _c
}

// GetQuorumInfo provides a mock function with given fields: _a0, _a1
func (_m *MetadataProvider) GetQuorumInfo(_a0 context.Context, _a1 int64) (*proto.QuorumInfo, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetQuorumInfo")
	}

	var r0 *proto.QuorumInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*proto.QuorumInfo, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *proto.QuorumInfo); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.QuorumInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MetadataProvider_GetQuorumInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetQuorumInfo'
type MetadataProvider_GetQuorumInfo_Call struct {
	*mock.Call
}

// GetQuorumInfo is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 int64
func (_e *MetadataProvider_Expecter) GetQuorumInfo(_a0 interface{}, _a1 interface{}) *MetadataProvider_GetQuorumInfo_Call {
	return &MetadataProvider_GetQuorumInfo_Call{Call: _e.mock.On("GetQuorumInfo", _a0, _a1)}
}

func (_c *MetadataProvider_GetQuorumInfo_Call) Run(run func(_a0 context.Context, _a1 int64)) *MetadataProvider_GetQuorumInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MetadataProvider_GetQuorumInfo_Call) Return(_a0 *proto.QuorumInfo, _a1 error) *MetadataProvider_GetQuorumInfo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MetadataProvider_GetQuorumInfo_Call) RunAndReturn(run func(context.Context, int64) (*proto.QuorumInfo, error)) *MetadataProvider_GetQuorumInfo_Call {
	_c.Call.Return(run)
	return _c
}

// GetSegmentMetadata provides a mock function with given fields: _a0, _a1, _a2
func (_m *MetadataProvider) GetSegmentMetadata(_a0 context.Context, _a1 string, _a2 int64) (*proto.SegmentMetadata, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for GetSegmentMetadata")
	}

	var r0 *proto.SegmentMetadata
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) (*proto.SegmentMetadata, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int64) *proto.SegmentMetadata); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.SegmentMetadata)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int64) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MetadataProvider_GetSegmentMetadata_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSegmentMetadata'
type MetadataProvider_GetSegmentMetadata_Call struct {
	*mock.Call
}

// GetSegmentMetadata is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
//   - _a2 int64
func (_e *MetadataProvider_Expecter) GetSegmentMetadata(_a0 interface{}, _a1 interface{}, _a2 interface{}) *MetadataProvider_GetSegmentMetadata_Call {
	return &MetadataProvider_GetSegmentMetadata_Call{Call: _e.mock.On("GetSegmentMetadata", _a0, _a1, _a2)}
}

func (_c *MetadataProvider_GetSegmentMetadata_Call) Run(run func(_a0 context.Context, _a1 string, _a2 int64)) *MetadataProvider_GetSegmentMetadata_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(int64))
	})
	return _c
}

func (_c *MetadataProvider_GetSegmentMetadata_Call) Return(_a0 *proto.SegmentMetadata, _a1 error) *MetadataProvider_GetSegmentMetadata_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MetadataProvider_GetSegmentMetadata_Call) RunAndReturn(run func(context.Context, string, int64) (*proto.SegmentMetadata, error)) *MetadataProvider_GetSegmentMetadata_Call {
	_c.Call.Return(run)
	return _c
}

// GetVersionInfo provides a mock function with given fields: _a0
func (_m *MetadataProvider) GetVersionInfo(_a0 context.Context) (*proto.Version, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetVersionInfo")
	}

	var r0 *proto.Version
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*proto.Version, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *proto.Version); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.Version)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MetadataProvider_GetVersionInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVersionInfo'
type MetadataProvider_GetVersionInfo_Call struct {
	*mock.Call
}

// GetVersionInfo is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *MetadataProvider_Expecter) GetVersionInfo(_a0 interface{}) *MetadataProvider_GetVersionInfo_Call {
	return &MetadataProvider_GetVersionInfo_Call{Call: _e.mock.On("GetVersionInfo", _a0)}
}

func (_c *MetadataProvider_GetVersionInfo_Call) Run(run func(_a0 context.Context)) *MetadataProvider_GetVersionInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MetadataProvider_GetVersionInfo_Call) Return(_a0 *proto.Version, _a1 error) *MetadataProvider_GetVersionInfo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MetadataProvider_GetVersionInfo_Call) RunAndReturn(run func(context.Context) (*proto.Version, error)) *MetadataProvider_GetVersionInfo_Call {
	_c.Call.Return(run)
	return _c
}

// InitIfNecessary provides a mock function with given fields: ctx
func (_m *MetadataProvider) InitIfNecessary(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for InitIfNecessary")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MetadataProvider_InitIfNecessary_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InitIfNecessary'
type MetadataProvider_InitIfNecessary_Call struct {
	*mock.Call
}

// InitIfNecessary is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MetadataProvider_Expecter) InitIfNecessary(ctx interface{}) *MetadataProvider_InitIfNecessary_Call {
	return &MetadataProvider_InitIfNecessary_Call{Call: _e.mock.On("InitIfNecessary", ctx)}
}

func (_c *MetadataProvider_InitIfNecessary_Call) Run(run func(ctx context.Context)) *MetadataProvider_InitIfNecessary_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MetadataProvider_InitIfNecessary_Call) Return(_a0 error) *MetadataProvider_InitIfNecessary_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MetadataProvider_InitIfNecessary_Call) RunAndReturn(run func(context.Context) error) *MetadataProvider_InitIfNecessary_Call {
	_c.Call.Return(run)
	return _c
}

// ListLogs provides a mock function with given fields: ctx
func (_m *MetadataProvider) ListLogs(ctx context.Context) ([]string, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListLogs")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]string, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []string); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MetadataProvider_ListLogs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListLogs'
type MetadataProvider_ListLogs_Call struct {
	*mock.Call
}

// ListLogs is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MetadataProvider_Expecter) ListLogs(ctx interface{}) *MetadataProvider_ListLogs_Call {
	return &MetadataProvider_ListLogs_Call{Call: _e.mock.On("ListLogs", ctx)}
}

func (_c *MetadataProvider_ListLogs_Call) Run(run func(ctx context.Context)) *MetadataProvider_ListLogs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MetadataProvider_ListLogs_Call) Return(_a0 []string, _a1 error) *MetadataProvider_ListLogs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MetadataProvider_ListLogs_Call) RunAndReturn(run func(context.Context) ([]string, error)) *MetadataProvider_ListLogs_Call {
	_c.Call.Return(run)
	return _c
}

// ListLogsWithPrefix provides a mock function with given fields: ctx, logNamePrefix
func (_m *MetadataProvider) ListLogsWithPrefix(ctx context.Context, logNamePrefix string) ([]string, error) {
	ret := _m.Called(ctx, logNamePrefix)

	if len(ret) == 0 {
		panic("no return value specified for ListLogsWithPrefix")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]string, error)); ok {
		return rf(ctx, logNamePrefix)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []string); ok {
		r0 = rf(ctx, logNamePrefix)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, logNamePrefix)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MetadataProvider_ListLogsWithPrefix_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListLogsWithPrefix'
type MetadataProvider_ListLogsWithPrefix_Call struct {
	*mock.Call
}

// ListLogsWithPrefix is a helper method to define mock.On call
//   - ctx context.Context
//   - logNamePrefix string
func (_e *MetadataProvider_Expecter) ListLogsWithPrefix(ctx interface{}, logNamePrefix interface{}) *MetadataProvider_ListLogsWithPrefix_Call {
	return &MetadataProvider_ListLogsWithPrefix_Call{Call: _e.mock.On("ListLogsWithPrefix", ctx, logNamePrefix)}
}

func (_c *MetadataProvider_ListLogsWithPrefix_Call) Run(run func(ctx context.Context, logNamePrefix string)) *MetadataProvider_ListLogsWithPrefix_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MetadataProvider_ListLogsWithPrefix_Call) Return(_a0 []string, _a1 error) *MetadataProvider_ListLogsWithPrefix_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MetadataProvider_ListLogsWithPrefix_Call) RunAndReturn(run func(context.Context, string) ([]string, error)) *MetadataProvider_ListLogsWithPrefix_Call {
	_c.Call.Return(run)
	return _c
}

// OpenLog provides a mock function with given fields: ctx, logName
func (_m *MetadataProvider) OpenLog(ctx context.Context, logName string) (*proto.LogMeta, map[int64]*proto.SegmentMetadata, error) {
	ret := _m.Called(ctx, logName)

	if len(ret) == 0 {
		panic("no return value specified for OpenLog")
	}

	var r0 *proto.LogMeta
	var r1 map[int64]*proto.SegmentMetadata
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*proto.LogMeta, map[int64]*proto.SegmentMetadata, error)); ok {
		return rf(ctx, logName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *proto.LogMeta); ok {
		r0 = rf(ctx, logName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.LogMeta)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) map[int64]*proto.SegmentMetadata); ok {
		r1 = rf(ctx, logName)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[int64]*proto.SegmentMetadata)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, logName)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MetadataProvider_OpenLog_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OpenLog'
type MetadataProvider_OpenLog_Call struct {
	*mock.Call
}

// OpenLog is a helper method to define mock.On call
//   - ctx context.Context
//   - logName string
func (_e *MetadataProvider_Expecter) OpenLog(ctx interface{}, logName interface{}) *MetadataProvider_OpenLog_Call {
	return &MetadataProvider_OpenLog_Call{Call: _e.mock.On("OpenLog", ctx, logName)}
}

func (_c *MetadataProvider_OpenLog_Call) Run(run func(ctx context.Context, logName string)) *MetadataProvider_OpenLog_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MetadataProvider_OpenLog_Call) Return(_a0 *proto.LogMeta, _a1 map[int64]*proto.SegmentMetadata, _a2 error) *MetadataProvider_OpenLog_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MetadataProvider_OpenLog_Call) RunAndReturn(run func(context.Context, string) (*proto.LogMeta, map[int64]*proto.SegmentMetadata, error)) *MetadataProvider_OpenLog_Call {
	_c.Call.Return(run)
	return _c
}

// ReleaseLogWriterLock provides a mock function with given fields: ctx, logName
func (_m *MetadataProvider) ReleaseLogWriterLock(ctx context.Context, logName string) error {
	ret := _m.Called(ctx, logName)

	if len(ret) == 0 {
		panic("no return value specified for ReleaseLogWriterLock")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, logName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MetadataProvider_ReleaseLogWriterLock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReleaseLogWriterLock'
type MetadataProvider_ReleaseLogWriterLock_Call struct {
	*mock.Call
}

// ReleaseLogWriterLock is a helper method to define mock.On call
//   - ctx context.Context
//   - logName string
func (_e *MetadataProvider_Expecter) ReleaseLogWriterLock(ctx interface{}, logName interface{}) *MetadataProvider_ReleaseLogWriterLock_Call {
	return &MetadataProvider_ReleaseLogWriterLock_Call{Call: _e.mock.On("ReleaseLogWriterLock", ctx, logName)}
}

func (_c *MetadataProvider_ReleaseLogWriterLock_Call) Run(run func(ctx context.Context, logName string)) *MetadataProvider_ReleaseLogWriterLock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MetadataProvider_ReleaseLogWriterLock_Call) Return(_a0 error) *MetadataProvider_ReleaseLogWriterLock_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MetadataProvider_ReleaseLogWriterLock_Call) RunAndReturn(run func(context.Context, string) error) *MetadataProvider_ReleaseLogWriterLock_Call {
	_c.Call.Return(run)
	return _c
}

// StoreQuorumInfo provides a mock function with given fields: ctx, info
func (_m *MetadataProvider) StoreQuorumInfo(ctx context.Context, info *proto.QuorumInfo) error {
	ret := _m.Called(ctx, info)

	if len(ret) == 0 {
		panic("no return value specified for StoreQuorumInfo")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *proto.QuorumInfo) error); ok {
		r0 = rf(ctx, info)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MetadataProvider_StoreQuorumInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StoreQuorumInfo'
type MetadataProvider_StoreQuorumInfo_Call struct {
	*mock.Call
}

// StoreQuorumInfo is a helper method to define mock.On call
//   - ctx context.Context
//   - info *proto.QuorumInfo
func (_e *MetadataProvider_Expecter) StoreQuorumInfo(ctx interface{}, info interface{}) *MetadataProvider_StoreQuorumInfo_Call {
	return &MetadataProvider_StoreQuorumInfo_Call{Call: _e.mock.On("StoreQuorumInfo", ctx, info)}
}

func (_c *MetadataProvider_StoreQuorumInfo_Call) Run(run func(ctx context.Context, info *proto.QuorumInfo)) *MetadataProvider_StoreQuorumInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*proto.QuorumInfo))
	})
	return _c
}

func (_c *MetadataProvider_StoreQuorumInfo_Call) Return(_a0 error) *MetadataProvider_StoreQuorumInfo_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MetadataProvider_StoreQuorumInfo_Call) RunAndReturn(run func(context.Context, *proto.QuorumInfo) error) *MetadataProvider_StoreQuorumInfo_Call {
	_c.Call.Return(run)
	return _c
}

// StoreSegmentMetadata provides a mock function with given fields: _a0, _a1, _a2
func (_m *MetadataProvider) StoreSegmentMetadata(_a0 context.Context, _a1 string, _a2 *proto.SegmentMetadata) error {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for StoreSegmentMetadata")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *proto.SegmentMetadata) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MetadataProvider_StoreSegmentMetadata_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StoreSegmentMetadata'
type MetadataProvider_StoreSegmentMetadata_Call struct {
	*mock.Call
}

// StoreSegmentMetadata is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
//   - _a2 *proto.SegmentMetadata
func (_e *MetadataProvider_Expecter) StoreSegmentMetadata(_a0 interface{}, _a1 interface{}, _a2 interface{}) *MetadataProvider_StoreSegmentMetadata_Call {
	return &MetadataProvider_StoreSegmentMetadata_Call{Call: _e.mock.On("StoreSegmentMetadata", _a0, _a1, _a2)}
}

func (_c *MetadataProvider_StoreSegmentMetadata_Call) Run(run func(_a0 context.Context, _a1 string, _a2 *proto.SegmentMetadata)) *MetadataProvider_StoreSegmentMetadata_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*proto.SegmentMetadata))
	})
	return _c
}

func (_c *MetadataProvider_StoreSegmentMetadata_Call) Return(_a0 error) *MetadataProvider_StoreSegmentMetadata_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MetadataProvider_StoreSegmentMetadata_Call) RunAndReturn(run func(context.Context, string, *proto.SegmentMetadata) error) *MetadataProvider_StoreSegmentMetadata_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateLogMeta provides a mock function with given fields: ctx, logName, logMeta
func (_m *MetadataProvider) UpdateLogMeta(ctx context.Context, logName string, logMeta *proto.LogMeta) error {
	ret := _m.Called(ctx, logName, logMeta)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLogMeta")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *proto.LogMeta) error); ok {
		r0 = rf(ctx, logName, logMeta)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MetadataProvider_UpdateLogMeta_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateLogMeta'
type MetadataProvider_UpdateLogMeta_Call struct {
	*mock.Call
}

// UpdateLogMeta is a helper method to define mock.On call
//   - ctx context.Context
//   - logName string
//   - logMeta *proto.LogMeta
func (_e *MetadataProvider_Expecter) UpdateLogMeta(ctx interface{}, logName interface{}, logMeta interface{}) *MetadataProvider_UpdateLogMeta_Call {
	return &MetadataProvider_UpdateLogMeta_Call{Call: _e.mock.On("UpdateLogMeta", ctx, logName, logMeta)}
}

func (_c *MetadataProvider_UpdateLogMeta_Call) Run(run func(ctx context.Context, logName string, logMeta *proto.LogMeta)) *MetadataProvider_UpdateLogMeta_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*proto.LogMeta))
	})
	return _c
}

func (_c *MetadataProvider_UpdateLogMeta_Call) Return(_a0 error) *MetadataProvider_UpdateLogMeta_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MetadataProvider_UpdateLogMeta_Call) RunAndReturn(run func(context.Context, string, *proto.LogMeta) error) *MetadataProvider_UpdateLogMeta_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateSegmentMetadata provides a mock function with given fields: _a0, _a1, _a2
func (_m *MetadataProvider) UpdateSegmentMetadata(_a0 context.Context, _a1 string, _a2 *proto.SegmentMetadata) error {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSegmentMetadata")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *proto.SegmentMetadata) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MetadataProvider_UpdateSegmentMetadata_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateSegmentMetadata'
type MetadataProvider_UpdateSegmentMetadata_Call struct {
	*mock.Call
}

// UpdateSegmentMetadata is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
//   - _a2 *proto.SegmentMetadata
func (_e *MetadataProvider_Expecter) UpdateSegmentMetadata(_a0 interface{}, _a1 interface{}, _a2 interface{}) *MetadataProvider_UpdateSegmentMetadata_Call {
	return &MetadataProvider_UpdateSegmentMetadata_Call{Call: _e.mock.On("UpdateSegmentMetadata", _a0, _a1, _a2)}
}

func (_c *MetadataProvider_UpdateSegmentMetadata_Call) Run(run func(_a0 context.Context, _a1 string, _a2 *proto.SegmentMetadata)) *MetadataProvider_UpdateSegmentMetadata_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*proto.SegmentMetadata))
	})
	return _c
}

func (_c *MetadataProvider_UpdateSegmentMetadata_Call) Return(_a0 error) *MetadataProvider_UpdateSegmentMetadata_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MetadataProvider_UpdateSegmentMetadata_Call) RunAndReturn(run func(context.Context, string, *proto.SegmentMetadata) error) *MetadataProvider_UpdateSegmentMetadata_Call {
	_c.Call.Return(run)
	return _c
}

// NewMetadataProvider creates a new instance of MetadataProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMetadataProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MetadataProvider {
	mock := &MetadataProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
