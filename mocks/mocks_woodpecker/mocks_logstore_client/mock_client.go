// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks_logstore_client

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	proto "github.com/zilliztech/woodpecker/proto"

	segment "github.com/zilliztech/woodpecker/server/segment"
)

// LogStoreClient is an autogenerated mock type for the LogStoreClient type
type LogStoreClient struct {
	mock.Mock
}

type LogStoreClient_Expecter struct {
	mock *mock.Mock
}

func (_m *LogStoreClient) EXPECT() *LogStoreClient_Expecter {
	return &LogStoreClient_Expecter{mock: &_m.Mock}
}

// AppendEntry provides a mock function with given fields: ctx, logId, entry
func (_m *LogStoreClient) AppendEntry(ctx context.Context, logId int64, entry *segment.SegmentEntry) (int64, <-chan int64, error) {
	ret := _m.Called(ctx, logId, entry)

	if len(ret) == 0 {
		panic("no return value specified for AppendEntry")
	}

	var r0 int64
	var r1 <-chan int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, *segment.SegmentEntry) (int64, <-chan int64, error)); ok {
		return rf(ctx, logId, entry)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, *segment.SegmentEntry) int64); ok {
		r0 = rf(ctx, logId, entry)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, *segment.SegmentEntry) <-chan int64); ok {
		r1 = rf(ctx, logId, entry)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(<-chan int64)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, int64, *segment.SegmentEntry) error); ok {
		r2 = rf(ctx, logId, entry)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// LogStoreClient_AppendEntry_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AppendEntry'
type LogStoreClient_AppendEntry_Call struct {
	*mock.Call
}

// AppendEntry is a helper method to define mock.On call
//   - ctx context.Context
//   - logId int64
//   - entry *segment.SegmentEntry
func (_e *LogStoreClient_Expecter) AppendEntry(ctx interface{}, logId interface{}, entry interface{}) *LogStoreClient_AppendEntry_Call {
	return &LogStoreClient_AppendEntry_Call{Call: _e.mock.On("AppendEntry", ctx, logId, entry)}
}

func (_c *LogStoreClient_AppendEntry_Call) Run(run func(ctx context.Context, logId int64, entry *segment.SegmentEntry)) *LogStoreClient_AppendEntry_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(*segment.SegmentEntry))
	})
	return _c
}

func (_c *LogStoreClient_AppendEntry_Call) Return(_a0 int64, _a1 <-chan int64, _a2 error) *LogStoreClient_AppendEntry_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *LogStoreClient_AppendEntry_Call) RunAndReturn(run func(context.Context, int64, *segment.SegmentEntry) (int64, <-chan int64, error)) *LogStoreClient_AppendEntry_Call {
	_c.Call.Return(run)
	return _c
}

// FenceSegment provides a mock function with given fields: ctx, logId, segmentId
func (_m *LogStoreClient) FenceSegment(ctx context.Context, logId int64, segmentId int64) error {
	ret := _m.Called(ctx, logId, segmentId)

	if len(ret) == 0 {
		panic("no return value specified for FenceSegment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) error); ok {
		r0 = rf(ctx, logId, segmentId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LogStoreClient_FenceSegment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FenceSegment'
type LogStoreClient_FenceSegment_Call struct {
	*mock.Call
}

// FenceSegment is a helper method to define mock.On call
//   - ctx context.Context
//   - logId int64
//   - segmentId int64
func (_e *LogStoreClient_Expecter) FenceSegment(ctx interface{}, logId interface{}, segmentId interface{}) *LogStoreClient_FenceSegment_Call {
	return &LogStoreClient_FenceSegment_Call{Call: _e.mock.On("FenceSegment", ctx, logId, segmentId)}
}

func (_c *LogStoreClient_FenceSegment_Call) Run(run func(ctx context.Context, logId int64, segmentId int64)) *LogStoreClient_FenceSegment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int64))
	})
	return _c
}

func (_c *LogStoreClient_FenceSegment_Call) Return(_a0 error) *LogStoreClient_FenceSegment_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LogStoreClient_FenceSegment_Call) RunAndReturn(run func(context.Context, int64, int64) error) *LogStoreClient_FenceSegment_Call {
	_c.Call.Return(run)
	return _c
}

// GetLastAddConfirmed provides a mock function with given fields: ctx, logId, segmentId
func (_m *LogStoreClient) GetLastAddConfirmed(ctx context.Context, logId int64, segmentId int64) (int64, error) {
	ret := _m.Called(ctx, logId, segmentId)

	if len(ret) == 0 {
		panic("no return value specified for GetLastAddConfirmed")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) (int64, error)); ok {
		return rf(ctx, logId, segmentId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) int64); ok {
		r0 = rf(ctx, logId, segmentId)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, int64) error); ok {
		r1 = rf(ctx, logId, segmentId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LogStoreClient_GetLastAddConfirmed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLastAddConfirmed'
type LogStoreClient_GetLastAddConfirmed_Call struct {
	*mock.Call
}

// GetLastAddConfirmed is a helper method to define mock.On call
//   - ctx context.Context
//   - logId int64
//   - segmentId int64
func (_e *LogStoreClient_Expecter) GetLastAddConfirmed(ctx interface{}, logId interface{}, segmentId interface{}) *LogStoreClient_GetLastAddConfirmed_Call {
	return &LogStoreClient_GetLastAddConfirmed_Call{Call: _e.mock.On("GetLastAddConfirmed", ctx, logId, segmentId)}
}

func (_c *LogStoreClient_GetLastAddConfirmed_Call) Run(run func(ctx context.Context, logId int64, segmentId int64)) *LogStoreClient_GetLastAddConfirmed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int64))
	})
	return _c
}

func (_c *LogStoreClient_GetLastAddConfirmed_Call) Return(_a0 int64, _a1 error) *LogStoreClient_GetLastAddConfirmed_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LogStoreClient_GetLastAddConfirmed_Call) RunAndReturn(run func(context.Context, int64, int64) (int64, error)) *LogStoreClient_GetLastAddConfirmed_Call {
	_c.Call.Return(run)
	return _c
}

// IsSegmentFenced provides a mock function with given fields: ctx, logId, segmentId
func (_m *LogStoreClient) IsSegmentFenced(ctx context.Context, logId int64, segmentId int64) (bool, error) {
	ret := _m.Called(ctx, logId, segmentId)

	if len(ret) == 0 {
		panic("no return value specified for IsSegmentFenced")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) (bool, error)); ok {
		return rf(ctx, logId, segmentId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) bool); ok {
		r0 = rf(ctx, logId, segmentId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, int64) error); ok {
		r1 = rf(ctx, logId, segmentId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LogStoreClient_IsSegmentFenced_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsSegmentFenced'
type LogStoreClient_IsSegmentFenced_Call struct {
	*mock.Call
}

// IsSegmentFenced is a helper method to define mock.On call
//   - ctx context.Context
//   - logId int64
//   - segmentId int64
func (_e *LogStoreClient_Expecter) IsSegmentFenced(ctx interface{}, logId interface{}, segmentId interface{}) *LogStoreClient_IsSegmentFenced_Call {
	return &LogStoreClient_IsSegmentFenced_Call{Call: _e.mock.On("IsSegmentFenced", ctx, logId, segmentId)}
}

func (_c *LogStoreClient_IsSegmentFenced_Call) Run(run func(ctx context.Context, logId int64, segmentId int64)) *LogStoreClient_IsSegmentFenced_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int64))
	})
	return _c
}

func (_c *LogStoreClient_IsSegmentFenced_Call) Return(_a0 bool, _a1 error) *LogStoreClient_IsSegmentFenced_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LogStoreClient_IsSegmentFenced_Call) RunAndReturn(run func(context.Context, int64, int64) (bool, error)) *LogStoreClient_IsSegmentFenced_Call {
	_c.Call.Return(run)
	return _c
}

// ReadBatchEntries provides a mock function with given fields: ctx, logId, segmentId, fromEntryId, toEntryId
func (_m *LogStoreClient) ReadBatchEntries(ctx context.Context, logId int64, segmentId int64, fromEntryId int64, toEntryId int64) ([]*segment.SegmentEntry, error) {
	ret := _m.Called(ctx, logId, segmentId, fromEntryId, toEntryId)

	if len(ret) == 0 {
		panic("no return value specified for ReadBatchEntries")
	}

	var r0 []*segment.SegmentEntry
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, int64, int64) ([]*segment.SegmentEntry, error)); ok {
		return rf(ctx, logId, segmentId, fromEntryId, toEntryId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, int64, int64) []*segment.SegmentEntry); ok {
		r0 = rf(ctx, logId, segmentId, fromEntryId, toEntryId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*segment.SegmentEntry)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, int64, int64, int64) error); ok {
		r1 = rf(ctx, logId, segmentId, fromEntryId, toEntryId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LogStoreClient_ReadBatchEntries_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadBatchEntries'
type LogStoreClient_ReadBatchEntries_Call struct {
	*mock.Call
}

// ReadBatchEntries is a helper method to define mock.On call
//   - ctx context.Context
//   - logId int64
//   - segmentId int64
//   - fromEntryId int64
//   - toEntryId int64
func (_e *LogStoreClient_Expecter) ReadBatchEntries(ctx interface{}, logId interface{}, segmentId interface{}, fromEntryId interface{}, toEntryId interface{}) *LogStoreClient_ReadBatchEntries_Call {
	return &LogStoreClient_ReadBatchEntries_Call{Call: _e.mock.On("ReadBatchEntries", ctx, logId, segmentId, fromEntryId, toEntryId)}
}

func (_c *LogStoreClient_ReadBatchEntries_Call) Run(run func(ctx context.Context, logId int64, segmentId int64, fromEntryId int64, toEntryId int64)) *LogStoreClient_ReadBatchEntries_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int64), args[3].(int64), args[4].(int64))
	})
	return _c
}

func (_c *LogStoreClient_ReadBatchEntries_Call) Return(_a0 []*segment.SegmentEntry, _a1 error) *LogStoreClient_ReadBatchEntries_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LogStoreClient_ReadBatchEntries_Call) RunAndReturn(run func(context.Context, int64, int64, int64, int64) ([]*segment.SegmentEntry, error)) *LogStoreClient_ReadBatchEntries_Call {
	_c.Call.Return(run)
	return _c
}

// ReadEntry provides a mock function with given fields: ctx, logId, segmentId, entryId
func (_m *LogStoreClient) ReadEntry(ctx context.Context, logId int64, segmentId int64, entryId int64) (*segment.SegmentEntry, error) {
	ret := _m.Called(ctx, logId, segmentId, entryId)

	if len(ret) == 0 {
		panic("no return value specified for ReadEntry")
	}

	var r0 *segment.SegmentEntry
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, int64) (*segment.SegmentEntry, error)); ok {
		return rf(ctx, logId, segmentId, entryId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, int64) *segment.SegmentEntry); ok {
		r0 = rf(ctx, logId, segmentId, entryId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*segment.SegmentEntry)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, int64, int64) error); ok {
		r1 = rf(ctx, logId, segmentId, entryId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LogStoreClient_ReadEntry_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadEntry'
type LogStoreClient_ReadEntry_Call struct {
	*mock.Call
}

// ReadEntry is a helper method to define mock.On call
//   - ctx context.Context
//   - logId int64
//   - segmentId int64
//   - entryId int64
func (_e *LogStoreClient_Expecter) ReadEntry(ctx interface{}, logId interface{}, segmentId interface{}, entryId interface{}) *LogStoreClient_ReadEntry_Call {
	return &LogStoreClient_ReadEntry_Call{Call: _e.mock.On("ReadEntry", ctx, logId, segmentId, entryId)}
}

func (_c *LogStoreClient_ReadEntry_Call) Run(run func(ctx context.Context, logId int64, segmentId int64, entryId int64)) *LogStoreClient_ReadEntry_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int64), args[3].(int64))
	})
	return _c
}

func (_c *LogStoreClient_ReadEntry_Call) Return(_a0 *segment.SegmentEntry, _a1 error) *LogStoreClient_ReadEntry_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LogStoreClient_ReadEntry_Call) RunAndReturn(run func(context.Context, int64, int64, int64) (*segment.SegmentEntry, error)) *LogStoreClient_ReadEntry_Call {
	_c.Call.Return(run)
	return _c
}

// SegmentClean provides a mock function with given fields: ctx, logId, segmentId, flag
func (_m *LogStoreClient) SegmentClean(ctx context.Context, logId int64, segmentId int64, flag int) error {
	ret := _m.Called(ctx, logId, segmentId, flag)

	if len(ret) == 0 {
		panic("no return value specified for SegmentClean")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, int) error); ok {
		r0 = rf(ctx, logId, segmentId, flag)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LogStoreClient_SegmentClean_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SegmentClean'
type LogStoreClient_SegmentClean_Call struct {
	*mock.Call
}

// SegmentClean is a helper method to define mock.On call
//   - ctx context.Context
//   - logId int64
//   - segmentId int64
//   - flag int
func (_e *LogStoreClient_Expecter) SegmentClean(ctx interface{}, logId interface{}, segmentId interface{}, flag interface{}) *LogStoreClient_SegmentClean_Call {
	return &LogStoreClient_SegmentClean_Call{Call: _e.mock.On("SegmentClean", ctx, logId, segmentId, flag)}
}

func (_c *LogStoreClient_SegmentClean_Call) Run(run func(ctx context.Context, logId int64, segmentId int64, flag int)) *LogStoreClient_SegmentClean_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int64), args[3].(int))
	})
	return _c
}

func (_c *LogStoreClient_SegmentClean_Call) Return(_a0 error) *LogStoreClient_SegmentClean_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LogStoreClient_SegmentClean_Call) RunAndReturn(run func(context.Context, int64, int64, int) error) *LogStoreClient_SegmentClean_Call {
	_c.Call.Return(run)
	return _c
}

// SegmentCompact provides a mock function with given fields: ctx, logId, segmentId
func (_m *LogStoreClient) SegmentCompact(ctx context.Context, logId int64, segmentId int64) (*proto.SegmentMetadata, error) {
	ret := _m.Called(ctx, logId, segmentId)

	if len(ret) == 0 {
		panic("no return value specified for SegmentCompact")
	}

	var r0 *proto.SegmentMetadata
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) (*proto.SegmentMetadata, error)); ok {
		return rf(ctx, logId, segmentId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) *proto.SegmentMetadata); ok {
		r0 = rf(ctx, logId, segmentId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.SegmentMetadata)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, int64) error); ok {
		r1 = rf(ctx, logId, segmentId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LogStoreClient_SegmentCompact_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SegmentCompact'
type LogStoreClient_SegmentCompact_Call struct {
	*mock.Call
}

// SegmentCompact is a helper method to define mock.On call
//   - ctx context.Context
//   - logId int64
//   - segmentId int64
func (_e *LogStoreClient_Expecter) SegmentCompact(ctx interface{}, logId interface{}, segmentId interface{}) *LogStoreClient_SegmentCompact_Call {
	return &LogStoreClient_SegmentCompact_Call{Call: _e.mock.On("SegmentCompact", ctx, logId, segmentId)}
}

func (_c *LogStoreClient_SegmentCompact_Call) Run(run func(ctx context.Context, logId int64, segmentId int64)) *LogStoreClient_SegmentCompact_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int64))
	})
	return _c
}

func (_c *LogStoreClient_SegmentCompact_Call) Return(_a0 *proto.SegmentMetadata, _a1 error) *LogStoreClient_SegmentCompact_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LogStoreClient_SegmentCompact_Call) RunAndReturn(run func(context.Context, int64, int64) (*proto.SegmentMetadata, error)) *LogStoreClient_SegmentCompact_Call {
	_c.Call.Return(run)
	return _c
}

// SegmentRecoveryFromInProgress provides a mock function with given fields: ctx, logId, segmentId
func (_m *LogStoreClient) SegmentRecoveryFromInProgress(ctx context.Context, logId int64, segmentId int64) (*proto.SegmentMetadata, error) {
	ret := _m.Called(ctx, logId, segmentId)

	if len(ret) == 0 {
		panic("no return value specified for SegmentRecoveryFromInProgress")
	}

	var r0 *proto.SegmentMetadata
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) (*proto.SegmentMetadata, error)); ok {
		return rf(ctx, logId, segmentId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) *proto.SegmentMetadata); ok {
		r0 = rf(ctx, logId, segmentId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.SegmentMetadata)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, int64) error); ok {
		r1 = rf(ctx, logId, segmentId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LogStoreClient_SegmentRecoveryFromInProgress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SegmentRecoveryFromInProgress'
type LogStoreClient_SegmentRecoveryFromInProgress_Call struct {
	*mock.Call
}

// SegmentRecoveryFromInProgress is a helper method to define mock.On call
//   - ctx context.Context
//   - logId int64
//   - segmentId int64
func (_e *LogStoreClient_Expecter) SegmentRecoveryFromInProgress(ctx interface{}, logId interface{}, segmentId interface{}) *LogStoreClient_SegmentRecoveryFromInProgress_Call {
	return &LogStoreClient_SegmentRecoveryFromInProgress_Call{Call: _e.mock.On("SegmentRecoveryFromInProgress", ctx, logId, segmentId)}
}

func (_c *LogStoreClient_SegmentRecoveryFromInProgress_Call) Run(run func(ctx context.Context, logId int64, segmentId int64)) *LogStoreClient_SegmentRecoveryFromInProgress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int64))
	})
	return _c
}

func (_c *LogStoreClient_SegmentRecoveryFromInProgress_Call) Return(_a0 *proto.SegmentMetadata, _a1 error) *LogStoreClient_SegmentRecoveryFromInProgress_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LogStoreClient_SegmentRecoveryFromInProgress_Call) RunAndReturn(run func(context.Context, int64, int64) (*proto.SegmentMetadata, error)) *LogStoreClient_SegmentRecoveryFromInProgress_Call {
	_c.Call.Return(run)
	return _c
}

// SegmentRecoveryFromInRecovery provides a mock function with given fields: ctx, logId, segmentId
func (_m *LogStoreClient) SegmentRecoveryFromInRecovery(ctx context.Context, logId int64, segmentId int64) (*proto.SegmentMetadata, error) {
	ret := _m.Called(ctx, logId, segmentId)

	if len(ret) == 0 {
		panic("no return value specified for SegmentRecoveryFromInRecovery")
	}

	var r0 *proto.SegmentMetadata
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) (*proto.SegmentMetadata, error)); ok {
		return rf(ctx, logId, segmentId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) *proto.SegmentMetadata); ok {
		r0 = rf(ctx, logId, segmentId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.SegmentMetadata)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, int64) error); ok {
		r1 = rf(ctx, logId, segmentId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LogStoreClient_SegmentRecoveryFromInRecovery_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SegmentRecoveryFromInRecovery'
type LogStoreClient_SegmentRecoveryFromInRecovery_Call struct {
	*mock.Call
}

// SegmentRecoveryFromInRecovery is a helper method to define mock.On call
//   - ctx context.Context
//   - logId int64
//   - segmentId int64
func (_e *LogStoreClient_Expecter) SegmentRecoveryFromInRecovery(ctx interface{}, logId interface{}, segmentId interface{}) *LogStoreClient_SegmentRecoveryFromInRecovery_Call {
	return &LogStoreClient_SegmentRecoveryFromInRecovery_Call{Call: _e.mock.On("SegmentRecoveryFromInRecovery", ctx, logId, segmentId)}
}

func (_c *LogStoreClient_SegmentRecoveryFromInRecovery_Call) Run(run func(ctx context.Context, logId int64, segmentId int64)) *LogStoreClient_SegmentRecoveryFromInRecovery_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int64))
	})
	return _c
}

func (_c *LogStoreClient_SegmentRecoveryFromInRecovery_Call) Return(_a0 *proto.SegmentMetadata, _a1 error) *LogStoreClient_SegmentRecoveryFromInRecovery_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LogStoreClient_SegmentRecoveryFromInRecovery_Call) RunAndReturn(run func(context.Context, int64, int64) (*proto.SegmentMetadata, error)) *LogStoreClient_SegmentRecoveryFromInRecovery_Call {
	_c.Call.Return(run)
	return _c
}

// NewLogStoreClient creates a new instance of LogStoreClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLogStoreClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *LogStoreClient {
	mock := &LogStoreClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
