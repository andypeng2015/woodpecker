// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks_logstore_client

import (
	mock "github.com/stretchr/testify/mock"
	client "github.com/zilliztech/woodpecker/woodpecker/client"
)

// LogStoreClientPool is an autogenerated mock type for the LogStoreClientPool type
type LogStoreClientPool struct {
	mock.Mock
}

type LogStoreClientPool_Expecter struct {
	mock *mock.Mock
}

func (_m *LogStoreClientPool) EXPECT() *LogStoreClientPool_Expecter {
	return &LogStoreClientPool_Expecter{mock: &_m.Mock}
}

// Clear provides a mock function with given fields: target
func (_m *LogStoreClientPool) Clear(target string) {
	_m.Called(target)
}

// LogStoreClientPool_Clear_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Clear'
type LogStoreClientPool_Clear_Call struct {
	*mock.Call
}

// Clear is a helper method to define mock.On call
//   - target string
func (_e *LogStoreClientPool_Expecter) Clear(target interface{}) *LogStoreClientPool_Clear_Call {
	return &LogStoreClientPool_Clear_Call{Call: _e.mock.On("Clear", target)}
}

func (_c *LogStoreClientPool_Clear_Call) Run(run func(target string)) *LogStoreClientPool_Clear_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *LogStoreClientPool_Clear_Call) Return() *LogStoreClientPool_Clear_Call {
	_c.Call.Return()
	return _c
}

func (_c *LogStoreClientPool_Clear_Call) RunAndReturn(run func(string)) *LogStoreClientPool_Clear_Call {
	_c.Run(run)
	return _c
}

// Close provides a mock function with no fields
func (_m *LogStoreClientPool) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LogStoreClientPool_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type LogStoreClientPool_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *LogStoreClientPool_Expecter) Close() *LogStoreClientPool_Close_Call {
	return &LogStoreClientPool_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *LogStoreClientPool_Close_Call) Run(run func()) *LogStoreClientPool_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *LogStoreClientPool_Close_Call) Return(_a0 error) *LogStoreClientPool_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LogStoreClientPool_Close_Call) RunAndReturn(run func() error) *LogStoreClientPool_Close_Call {
	_c.Call.Return(run)
	return _c
}

// GetLogStoreClient provides a mock function with given fields: target
func (_m *LogStoreClientPool) GetLogStoreClient(target string) (client.LogStoreClient, error) {
	ret := _m.Called(target)

	if len(ret) == 0 {
		panic("no return value specified for GetLogStoreClient")
	}

	var r0 client.LogStoreClient
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (client.LogStoreClient, error)); ok {
		return rf(target)
	}
	if rf, ok := ret.Get(0).(func(string) client.LogStoreClient); ok {
		r0 = rf(target)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(client.LogStoreClient)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(target)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LogStoreClientPool_GetLogStoreClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLogStoreClient'
type LogStoreClientPool_GetLogStoreClient_Call struct {
	*mock.Call
}

// GetLogStoreClient is a helper method to define mock.On call
//   - target string
func (_e *LogStoreClientPool_Expecter) GetLogStoreClient(target interface{}) *LogStoreClientPool_GetLogStoreClient_Call {
	return &LogStoreClientPool_GetLogStoreClient_Call{Call: _e.mock.On("GetLogStoreClient", target)}
}

func (_c *LogStoreClientPool_GetLogStoreClient_Call) Run(run func(target string)) *LogStoreClientPool_GetLogStoreClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *LogStoreClientPool_GetLogStoreClient_Call) Return(_a0 client.LogStoreClient, _a1 error) *LogStoreClientPool_GetLogStoreClient_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LogStoreClientPool_GetLogStoreClient_Call) RunAndReturn(run func(string) (client.LogStoreClient, error)) *LogStoreClientPool_GetLogStoreClient_Call {
	_c.Call.Return(run)
	return _c
}

// NewLogStoreClientPool creates a new instance of LogStoreClientPool. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLogStoreClientPool(t interface {
	mock.TestingT
	Cleanup(func())
}) *LogStoreClientPool {
	mock := &LogStoreClientPool{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
