// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks_segment_handle

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	processor "github.com/zilliztech/woodpecker/server/processor"

	proto "github.com/zilliztech/woodpecker/proto"
)

// SegmentHandle is an autogenerated mock type for the SegmentHandle type
type SegmentHandle struct {
	mock.Mock
}

type SegmentHandle_Expecter struct {
	mock *mock.Mock
}

func (_m *SegmentHandle) EXPECT() *SegmentHandle_Expecter {
	return &SegmentHandle_Expecter{mock: &_m.Mock}
}

// AppendAsync provides a mock function with given fields: _a0, _a1, _a2
func (_m *SegmentHandle) AppendAsync(_a0 context.Context, _a1 []byte, _a2 func(int64, int64, error)) {
	_m.Called(_a0, _a1, _a2)
}

// SegmentHandle_AppendAsync_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AppendAsync'
type SegmentHandle_AppendAsync_Call struct {
	*mock.Call
}

// AppendAsync is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 []byte
//   - _a2 func(int64 , int64 , error)
func (_e *SegmentHandle_Expecter) AppendAsync(_a0 interface{}, _a1 interface{}, _a2 interface{}) *SegmentHandle_AppendAsync_Call {
	return &SegmentHandle_AppendAsync_Call{Call: _e.mock.On("AppendAsync", _a0, _a1, _a2)}
}

func (_c *SegmentHandle_AppendAsync_Call) Run(run func(_a0 context.Context, _a1 []byte, _a2 func(int64, int64, error))) *SegmentHandle_AppendAsync_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]byte), args[2].(func(int64, int64, error)))
	})
	return _c
}

func (_c *SegmentHandle_AppendAsync_Call) Return() *SegmentHandle_AppendAsync_Call {
	_c.Call.Return()
	return _c
}

func (_c *SegmentHandle_AppendAsync_Call) RunAndReturn(run func(context.Context, []byte, func(int64, int64, error))) *SegmentHandle_AppendAsync_Call {
	_c.Run(run)
	return _c
}

// Compact provides a mock function with given fields: _a0
func (_m *SegmentHandle) Compact(_a0 context.Context) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Compact")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SegmentHandle_Compact_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Compact'
type SegmentHandle_Compact_Call struct {
	*mock.Call
}

// Compact is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *SegmentHandle_Expecter) Compact(_a0 interface{}) *SegmentHandle_Compact_Call {
	return &SegmentHandle_Compact_Call{Call: _e.mock.On("Compact", _a0)}
}

func (_c *SegmentHandle_Compact_Call) Run(run func(_a0 context.Context)) *SegmentHandle_Compact_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *SegmentHandle_Compact_Call) Return(_a0 error) *SegmentHandle_Compact_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SegmentHandle_Compact_Call) RunAndReturn(run func(context.Context) error) *SegmentHandle_Compact_Call {
	_c.Call.Return(run)
	return _c
}

// Complete provides a mock function with given fields: _a0
func (_m *SegmentHandle) Complete(_a0 context.Context) (int64, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Complete")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (int64, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) int64); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SegmentHandle_Complete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Complete'
type SegmentHandle_Complete_Call struct {
	*mock.Call
}

// Complete is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *SegmentHandle_Expecter) Complete(_a0 interface{}) *SegmentHandle_Complete_Call {
	return &SegmentHandle_Complete_Call{Call: _e.mock.On("Complete", _a0)}
}

func (_c *SegmentHandle_Complete_Call) Run(run func(_a0 context.Context)) *SegmentHandle_Complete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *SegmentHandle_Complete_Call) Return(_a0 int64, _a1 error) *SegmentHandle_Complete_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SegmentHandle_Complete_Call) RunAndReturn(run func(context.Context) (int64, error)) *SegmentHandle_Complete_Call {
	_c.Call.Return(run)
	return _c
}

// Fence provides a mock function with given fields: _a0
func (_m *SegmentHandle) Fence(_a0 context.Context) (int64, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Fence")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (int64, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) int64); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SegmentHandle_Fence_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Fence'
type SegmentHandle_Fence_Call struct {
	*mock.Call
}

// Fence is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *SegmentHandle_Expecter) Fence(_a0 interface{}) *SegmentHandle_Fence_Call {
	return &SegmentHandle_Fence_Call{Call: _e.mock.On("Fence", _a0)}
}

func (_c *SegmentHandle_Fence_Call) Run(run func(_a0 context.Context)) *SegmentHandle_Fence_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *SegmentHandle_Fence_Call) Return(_a0 int64, _a1 error) *SegmentHandle_Fence_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SegmentHandle_Fence_Call) RunAndReturn(run func(context.Context) (int64, error)) *SegmentHandle_Fence_Call {
	_c.Call.Return(run)
	return _c
}

// ForceCompleteAndClose provides a mock function with given fields: ctx
func (_m *SegmentHandle) ForceCompleteAndClose(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ForceCompleteAndClose")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SegmentHandle_ForceCompleteAndClose_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ForceCompleteAndClose'
type SegmentHandle_ForceCompleteAndClose_Call struct {
	*mock.Call
}

// ForceCompleteAndClose is a helper method to define mock.On call
//   - ctx context.Context
func (_e *SegmentHandle_Expecter) ForceCompleteAndClose(ctx interface{}) *SegmentHandle_ForceCompleteAndClose_Call {
	return &SegmentHandle_ForceCompleteAndClose_Call{Call: _e.mock.On("ForceCompleteAndClose", ctx)}
}

func (_c *SegmentHandle_ForceCompleteAndClose_Call) Run(run func(ctx context.Context)) *SegmentHandle_ForceCompleteAndClose_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *SegmentHandle_ForceCompleteAndClose_Call) Return(_a0 error) *SegmentHandle_ForceCompleteAndClose_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SegmentHandle_ForceCompleteAndClose_Call) RunAndReturn(run func(context.Context) error) *SegmentHandle_ForceCompleteAndClose_Call {
	_c.Call.Return(run)
	return _c
}

// GetId provides a mock function with given fields: _a0
func (_m *SegmentHandle) GetId(_a0 context.Context) int64 {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetId")
	}

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context) int64); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// SegmentHandle_GetId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetId'
type SegmentHandle_GetId_Call struct {
	*mock.Call
}

// GetId is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *SegmentHandle_Expecter) GetId(_a0 interface{}) *SegmentHandle_GetId_Call {
	return &SegmentHandle_GetId_Call{Call: _e.mock.On("GetId", _a0)}
}

func (_c *SegmentHandle_GetId_Call) Run(run func(_a0 context.Context)) *SegmentHandle_GetId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *SegmentHandle_GetId_Call) Return(_a0 int64) *SegmentHandle_GetId_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SegmentHandle_GetId_Call) RunAndReturn(run func(context.Context) int64) *SegmentHandle_GetId_Call {
	_c.Call.Return(run)
	return _c
}

// GetLastAccessTime provides a mock function with no fields
func (_m *SegmentHandle) GetLastAccessTime() int64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLastAccessTime")
	}

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// SegmentHandle_GetLastAccessTime_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLastAccessTime'
type SegmentHandle_GetLastAccessTime_Call struct {
	*mock.Call
}

// GetLastAccessTime is a helper method to define mock.On call
func (_e *SegmentHandle_Expecter) GetLastAccessTime() *SegmentHandle_GetLastAccessTime_Call {
	return &SegmentHandle_GetLastAccessTime_Call{Call: _e.mock.On("GetLastAccessTime")}
}

func (_c *SegmentHandle_GetLastAccessTime_Call) Run(run func()) *SegmentHandle_GetLastAccessTime_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *SegmentHandle_GetLastAccessTime_Call) Return(_a0 int64) *SegmentHandle_GetLastAccessTime_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SegmentHandle_GetLastAccessTime_Call) RunAndReturn(run func() int64) *SegmentHandle_GetLastAccessTime_Call {
	_c.Call.Return(run)
	return _c
}

// GetLastAddConfirmed provides a mock function with given fields: _a0
func (_m *SegmentHandle) GetLastAddConfirmed(_a0 context.Context) (int64, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetLastAddConfirmed")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (int64, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) int64); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SegmentHandle_GetLastAddConfirmed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLastAddConfirmed'
type SegmentHandle_GetLastAddConfirmed_Call struct {
	*mock.Call
}

// GetLastAddConfirmed is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *SegmentHandle_Expecter) GetLastAddConfirmed(_a0 interface{}) *SegmentHandle_GetLastAddConfirmed_Call {
	return &SegmentHandle_GetLastAddConfirmed_Call{Call: _e.mock.On("GetLastAddConfirmed", _a0)}
}

func (_c *SegmentHandle_GetLastAddConfirmed_Call) Run(run func(_a0 context.Context)) *SegmentHandle_GetLastAddConfirmed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *SegmentHandle_GetLastAddConfirmed_Call) Return(_a0 int64, _a1 error) *SegmentHandle_GetLastAddConfirmed_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SegmentHandle_GetLastAddConfirmed_Call) RunAndReturn(run func(context.Context) (int64, error)) *SegmentHandle_GetLastAddConfirmed_Call {
	_c.Call.Return(run)
	return _c
}

// GetLastAddPushed provides a mock function with given fields: _a0
func (_m *SegmentHandle) GetLastAddPushed(_a0 context.Context) (int64, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetLastAddPushed")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (int64, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) int64); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SegmentHandle_GetLastAddPushed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLastAddPushed'
type SegmentHandle_GetLastAddPushed_Call struct {
	*mock.Call
}

// GetLastAddPushed is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *SegmentHandle_Expecter) GetLastAddPushed(_a0 interface{}) *SegmentHandle_GetLastAddPushed_Call {
	return &SegmentHandle_GetLastAddPushed_Call{Call: _e.mock.On("GetLastAddPushed", _a0)}
}

func (_c *SegmentHandle_GetLastAddPushed_Call) Run(run func(_a0 context.Context)) *SegmentHandle_GetLastAddPushed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *SegmentHandle_GetLastAddPushed_Call) Return(_a0 int64, _a1 error) *SegmentHandle_GetLastAddPushed_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SegmentHandle_GetLastAddPushed_Call) RunAndReturn(run func(context.Context) (int64, error)) *SegmentHandle_GetLastAddPushed_Call {
	_c.Call.Return(run)
	return _c
}

// GetLogName provides a mock function with no fields
func (_m *SegmentHandle) GetLogName() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLogName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// SegmentHandle_GetLogName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLogName'
type SegmentHandle_GetLogName_Call struct {
	*mock.Call
}

// GetLogName is a helper method to define mock.On call
func (_e *SegmentHandle_Expecter) GetLogName() *SegmentHandle_GetLogName_Call {
	return &SegmentHandle_GetLogName_Call{Call: _e.mock.On("GetLogName")}
}

func (_c *SegmentHandle_GetLogName_Call) Run(run func()) *SegmentHandle_GetLogName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *SegmentHandle_GetLogName_Call) Return(_a0 string) *SegmentHandle_GetLogName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SegmentHandle_GetLogName_Call) RunAndReturn(run func() string) *SegmentHandle_GetLogName_Call {
	_c.Call.Return(run)
	return _c
}

// GetMetadata provides a mock function with given fields: _a0
func (_m *SegmentHandle) GetMetadata(_a0 context.Context) *proto.SegmentMetadata {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetMetadata")
	}

	var r0 *proto.SegmentMetadata
	if rf, ok := ret.Get(0).(func(context.Context) *proto.SegmentMetadata); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.SegmentMetadata)
		}
	}

	return r0
}

// SegmentHandle_GetMetadata_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMetadata'
type SegmentHandle_GetMetadata_Call struct {
	*mock.Call
}

// GetMetadata is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *SegmentHandle_Expecter) GetMetadata(_a0 interface{}) *SegmentHandle_GetMetadata_Call {
	return &SegmentHandle_GetMetadata_Call{Call: _e.mock.On("GetMetadata", _a0)}
}

func (_c *SegmentHandle_GetMetadata_Call) Run(run func(_a0 context.Context)) *SegmentHandle_GetMetadata_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *SegmentHandle_GetMetadata_Call) Return(_a0 *proto.SegmentMetadata) *SegmentHandle_GetMetadata_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SegmentHandle_GetMetadata_Call) RunAndReturn(run func(context.Context) *proto.SegmentMetadata) *SegmentHandle_GetMetadata_Call {
	_c.Call.Return(run)
	return _c
}

// GetQuorumInfo provides a mock function with given fields: _a0
func (_m *SegmentHandle) GetQuorumInfo(_a0 context.Context) (*proto.QuorumInfo, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetQuorumInfo")
	}

	var r0 *proto.QuorumInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*proto.QuorumInfo, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *proto.QuorumInfo); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.QuorumInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SegmentHandle_GetQuorumInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetQuorumInfo'
type SegmentHandle_GetQuorumInfo_Call struct {
	*mock.Call
}

// GetQuorumInfo is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *SegmentHandle_Expecter) GetQuorumInfo(_a0 interface{}) *SegmentHandle_GetQuorumInfo_Call {
	return &SegmentHandle_GetQuorumInfo_Call{Call: _e.mock.On("GetQuorumInfo", _a0)}
}

func (_c *SegmentHandle_GetQuorumInfo_Call) Run(run func(_a0 context.Context)) *SegmentHandle_GetQuorumInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *SegmentHandle_GetQuorumInfo_Call) Return(_a0 *proto.QuorumInfo, _a1 error) *SegmentHandle_GetQuorumInfo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SegmentHandle_GetQuorumInfo_Call) RunAndReturn(run func(context.Context) (*proto.QuorumInfo, error)) *SegmentHandle_GetQuorumInfo_Call {
	_c.Call.Return(run)
	return _c
}

// GetSize provides a mock function with given fields: _a0
func (_m *SegmentHandle) GetSize(_a0 context.Context) int64 {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetSize")
	}

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context) int64); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// SegmentHandle_GetSize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSize'
type SegmentHandle_GetSize_Call struct {
	*mock.Call
}

// GetSize is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *SegmentHandle_Expecter) GetSize(_a0 interface{}) *SegmentHandle_GetSize_Call {
	return &SegmentHandle_GetSize_Call{Call: _e.mock.On("GetSize", _a0)}
}

func (_c *SegmentHandle_GetSize_Call) Run(run func(_a0 context.Context)) *SegmentHandle_GetSize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *SegmentHandle_GetSize_Call) Return(_a0 int64) *SegmentHandle_GetSize_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SegmentHandle_GetSize_Call) RunAndReturn(run func(context.Context) int64) *SegmentHandle_GetSize_Call {
	_c.Call.Return(run)
	return _c
}

// IsForceRollingReady provides a mock function with given fields: _a0
func (_m *SegmentHandle) IsForceRollingReady(_a0 context.Context) bool {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for IsForceRollingReady")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// SegmentHandle_IsForceRollingReady_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsForceRollingReady'
type SegmentHandle_IsForceRollingReady_Call struct {
	*mock.Call
}

// IsForceRollingReady is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *SegmentHandle_Expecter) IsForceRollingReady(_a0 interface{}) *SegmentHandle_IsForceRollingReady_Call {
	return &SegmentHandle_IsForceRollingReady_Call{Call: _e.mock.On("IsForceRollingReady", _a0)}
}

func (_c *SegmentHandle_IsForceRollingReady_Call) Run(run func(_a0 context.Context)) *SegmentHandle_IsForceRollingReady_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *SegmentHandle_IsForceRollingReady_Call) Return(_a0 bool) *SegmentHandle_IsForceRollingReady_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SegmentHandle_IsForceRollingReady_Call) RunAndReturn(run func(context.Context) bool) *SegmentHandle_IsForceRollingReady_Call {
	_c.Call.Return(run)
	return _c
}

// IsWritable provides a mock function with given fields: _a0
func (_m *SegmentHandle) IsWritable(_a0 context.Context) (bool, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for IsWritable")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (bool, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SegmentHandle_IsWritable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsWritable'
type SegmentHandle_IsWritable_Call struct {
	*mock.Call
}

// IsWritable is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *SegmentHandle_Expecter) IsWritable(_a0 interface{}) *SegmentHandle_IsWritable_Call {
	return &SegmentHandle_IsWritable_Call{Call: _e.mock.On("IsWritable", _a0)}
}

func (_c *SegmentHandle_IsWritable_Call) Run(run func(_a0 context.Context)) *SegmentHandle_IsWritable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *SegmentHandle_IsWritable_Call) Return(_a0 bool, _a1 error) *SegmentHandle_IsWritable_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SegmentHandle_IsWritable_Call) RunAndReturn(run func(context.Context) (bool, error)) *SegmentHandle_IsWritable_Call {
	_c.Call.Return(run)
	return _c
}

// ReadBatch provides a mock function with given fields: _a0, _a1, _a2
func (_m *SegmentHandle) ReadBatch(_a0 context.Context, _a1 int64, _a2 int64) ([]*processor.SegmentEntry, error) {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for ReadBatch")
	}

	var r0 []*processor.SegmentEntry
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) ([]*processor.SegmentEntry, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) []*processor.SegmentEntry); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*processor.SegmentEntry)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, int64) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SegmentHandle_ReadBatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadBatch'
type SegmentHandle_ReadBatch_Call struct {
	*mock.Call
}

// ReadBatch is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 int64
//   - _a2 int64
func (_e *SegmentHandle_Expecter) ReadBatch(_a0 interface{}, _a1 interface{}, _a2 interface{}) *SegmentHandle_ReadBatch_Call {
	return &SegmentHandle_ReadBatch_Call{Call: _e.mock.On("ReadBatch", _a0, _a1, _a2)}
}

func (_c *SegmentHandle_ReadBatch_Call) Run(run func(_a0 context.Context, _a1 int64, _a2 int64)) *SegmentHandle_ReadBatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int64))
	})
	return _c
}

func (_c *SegmentHandle_ReadBatch_Call) Return(_a0 []*processor.SegmentEntry, _a1 error) *SegmentHandle_ReadBatch_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SegmentHandle_ReadBatch_Call) RunAndReturn(run func(context.Context, int64, int64) ([]*processor.SegmentEntry, error)) *SegmentHandle_ReadBatch_Call {
	_c.Call.Return(run)
	return _c
}

// RefreshAndGetMetadata provides a mock function with given fields: _a0
func (_m *SegmentHandle) RefreshAndGetMetadata(_a0 context.Context) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for RefreshAndGetMetadata")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SegmentHandle_RefreshAndGetMetadata_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RefreshAndGetMetadata'
type SegmentHandle_RefreshAndGetMetadata_Call struct {
	*mock.Call
}

// RefreshAndGetMetadata is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *SegmentHandle_Expecter) RefreshAndGetMetadata(_a0 interface{}) *SegmentHandle_RefreshAndGetMetadata_Call {
	return &SegmentHandle_RefreshAndGetMetadata_Call{Call: _e.mock.On("RefreshAndGetMetadata", _a0)}
}

func (_c *SegmentHandle_RefreshAndGetMetadata_Call) Run(run func(_a0 context.Context)) *SegmentHandle_RefreshAndGetMetadata_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *SegmentHandle_RefreshAndGetMetadata_Call) Return(_a0 error) *SegmentHandle_RefreshAndGetMetadata_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SegmentHandle_RefreshAndGetMetadata_Call) RunAndReturn(run func(context.Context) error) *SegmentHandle_RefreshAndGetMetadata_Call {
	_c.Call.Return(run)
	return _c
}

// RequestCompactionAsync provides a mock function with given fields: _a0
func (_m *SegmentHandle) RequestCompactionAsync(_a0 context.Context) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for RequestCompactionAsync")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SegmentHandle_RequestCompactionAsync_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RequestCompactionAsync'
type SegmentHandle_RequestCompactionAsync_Call struct {
	*mock.Call
}

// RequestCompactionAsync is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *SegmentHandle_Expecter) RequestCompactionAsync(_a0 interface{}) *SegmentHandle_RequestCompactionAsync_Call {
	return &SegmentHandle_RequestCompactionAsync_Call{Call: _e.mock.On("RequestCompactionAsync", _a0)}
}

func (_c *SegmentHandle_RequestCompactionAsync_Call) Run(run func(_a0 context.Context)) *SegmentHandle_RequestCompactionAsync_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *SegmentHandle_RequestCompactionAsync_Call) Return(_a0 error) *SegmentHandle_RequestCompactionAsync_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SegmentHandle_RequestCompactionAsync_Call) RunAndReturn(run func(context.Context) error) *SegmentHandle_RequestCompactionAsync_Call {
	_c.Call.Return(run)
	return _c
}

// SendAppendErrorCallbacks provides a mock function with given fields: _a0, _a1, _a2
func (_m *SegmentHandle) SendAppendErrorCallbacks(_a0 context.Context, _a1 int64, _a2 error) {
	_m.Called(_a0, _a1, _a2)
}

// SegmentHandle_SendAppendErrorCallbacks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendAppendErrorCallbacks'
type SegmentHandle_SendAppendErrorCallbacks_Call struct {
	*mock.Call
}

// SendAppendErrorCallbacks is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 int64
//   - _a2 error
func (_e *SegmentHandle_Expecter) SendAppendErrorCallbacks(_a0 interface{}, _a1 interface{}, _a2 interface{}) *SegmentHandle_SendAppendErrorCallbacks_Call {
	return &SegmentHandle_SendAppendErrorCallbacks_Call{Call: _e.mock.On("SendAppendErrorCallbacks", _a0, _a1, _a2)}
}

func (_c *SegmentHandle_SendAppendErrorCallbacks_Call) Run(run func(_a0 context.Context, _a1 int64, _a2 error)) *SegmentHandle_SendAppendErrorCallbacks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(error))
	})
	return _c
}

func (_c *SegmentHandle_SendAppendErrorCallbacks_Call) Return() *SegmentHandle_SendAppendErrorCallbacks_Call {
	_c.Call.Return()
	return _c
}

func (_c *SegmentHandle_SendAppendErrorCallbacks_Call) RunAndReturn(run func(context.Context, int64, error)) *SegmentHandle_SendAppendErrorCallbacks_Call {
	_c.Run(run)
	return _c
}

// SendAppendSuccessCallbacks provides a mock function with given fields: _a0, _a1
func (_m *SegmentHandle) SendAppendSuccessCallbacks(_a0 context.Context, _a1 int64) {
	_m.Called(_a0, _a1)
}

// SegmentHandle_SendAppendSuccessCallbacks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendAppendSuccessCallbacks'
type SegmentHandle_SendAppendSuccessCallbacks_Call struct {
	*mock.Call
}

// SendAppendSuccessCallbacks is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 int64
func (_e *SegmentHandle_Expecter) SendAppendSuccessCallbacks(_a0 interface{}, _a1 interface{}) *SegmentHandle_SendAppendSuccessCallbacks_Call {
	return &SegmentHandle_SendAppendSuccessCallbacks_Call{Call: _e.mock.On("SendAppendSuccessCallbacks", _a0, _a1)}
}

func (_c *SegmentHandle_SendAppendSuccessCallbacks_Call) Run(run func(_a0 context.Context, _a1 int64)) *SegmentHandle_SendAppendSuccessCallbacks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *SegmentHandle_SendAppendSuccessCallbacks_Call) Return() *SegmentHandle_SendAppendSuccessCallbacks_Call {
	_c.Call.Return()
	return _c
}

func (_c *SegmentHandle_SendAppendSuccessCallbacks_Call) RunAndReturn(run func(context.Context, int64)) *SegmentHandle_SendAppendSuccessCallbacks_Call {
	_c.Run(run)
	return _c
}

// SetRollingReady provides a mock function with given fields: _a0
func (_m *SegmentHandle) SetRollingReady(_a0 context.Context) {
	_m.Called(_a0)
}

// SegmentHandle_SetRollingReady_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetRollingReady'
type SegmentHandle_SetRollingReady_Call struct {
	*mock.Call
}

// SetRollingReady is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *SegmentHandle_Expecter) SetRollingReady(_a0 interface{}) *SegmentHandle_SetRollingReady_Call {
	return &SegmentHandle_SetRollingReady_Call{Call: _e.mock.On("SetRollingReady", _a0)}
}

func (_c *SegmentHandle_SetRollingReady_Call) Run(run func(_a0 context.Context)) *SegmentHandle_SetRollingReady_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *SegmentHandle_SetRollingReady_Call) Return() *SegmentHandle_SetRollingReady_Call {
	_c.Call.Return()
	return _c
}

func (_c *SegmentHandle_SetRollingReady_Call) RunAndReturn(run func(context.Context)) *SegmentHandle_SetRollingReady_Call {
	_c.Run(run)
	return _c
}

// NewSegmentHandle creates a new instance of SegmentHandle. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSegmentHandle(t interface {
	mock.TestingT
	Cleanup(func())
}) *SegmentHandle {
	mock := &SegmentHandle{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
