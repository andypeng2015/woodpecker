// Code generated by mockery v2.46.0. DO NOT EDIT.

package mocks_log_handle

import (
	context "context"

	meta "github.com/zilliztech/woodpecker/meta"
	log "github.com/zilliztech/woodpecker/woodpecker/log"

	mock "github.com/stretchr/testify/mock"

	proto "github.com/zilliztech/woodpecker/proto"

	segment "github.com/zilliztech/woodpecker/woodpecker/segment"
)

// LogHandle is an autogenerated mock type for the LogHandle type
type LogHandle struct {
	mock.Mock
}

type LogHandle_Expecter struct {
	mock *mock.Mock
}

func (_m *LogHandle) EXPECT() *LogHandle_Expecter {
	return &LogHandle_Expecter{mock: &_m.Mock}
}

// CloseAndCompleteCurrentWritableSegment provides a mock function with given fields: _a0
func (_m *LogHandle) CloseAndCompleteCurrentWritableSegment(_a0 context.Context) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for CloseAndCompleteCurrentWritableSegment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LogHandle_CloseAndCompleteCurrentWritableSegment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CloseAndCompleteCurrentWritableSegment'
type LogHandle_CloseAndCompleteCurrentWritableSegment_Call struct {
	*mock.Call
}

// CloseAndCompleteCurrentWritableSegment is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *LogHandle_Expecter) CloseAndCompleteCurrentWritableSegment(_a0 interface{}) *LogHandle_CloseAndCompleteCurrentWritableSegment_Call {
	return &LogHandle_CloseAndCompleteCurrentWritableSegment_Call{Call: _e.mock.On("CloseAndCompleteCurrentWritableSegment", _a0)}
}

func (_c *LogHandle_CloseAndCompleteCurrentWritableSegment_Call) Run(run func(_a0 context.Context)) *LogHandle_CloseAndCompleteCurrentWritableSegment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *LogHandle_CloseAndCompleteCurrentWritableSegment_Call) Return(_a0 error) *LogHandle_CloseAndCompleteCurrentWritableSegment_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LogHandle_CloseAndCompleteCurrentWritableSegment_Call) RunAndReturn(run func(context.Context) error) *LogHandle_CloseAndCompleteCurrentWritableSegment_Call {
	_c.Call.Return(run)
	return _c
}

// GetExistsReadonlySegmentHandle provides a mock function with given fields: _a0, _a1
func (_m *LogHandle) GetExistsReadonlySegmentHandle(_a0 context.Context, _a1 int64) (segment.SegmentHandle, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetExistsReadonlySegmentHandle")
	}

	var r0 segment.SegmentHandle
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (segment.SegmentHandle, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) segment.SegmentHandle); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(segment.SegmentHandle)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LogHandle_GetExistsReadonlySegmentHandle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetExistsReadonlySegmentHandle'
type LogHandle_GetExistsReadonlySegmentHandle_Call struct {
	*mock.Call
}

// GetExistsReadonlySegmentHandle is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 int64
func (_e *LogHandle_Expecter) GetExistsReadonlySegmentHandle(_a0 interface{}, _a1 interface{}) *LogHandle_GetExistsReadonlySegmentHandle_Call {
	return &LogHandle_GetExistsReadonlySegmentHandle_Call{Call: _e.mock.On("GetExistsReadonlySegmentHandle", _a0, _a1)}
}

func (_c *LogHandle_GetExistsReadonlySegmentHandle_Call) Run(run func(_a0 context.Context, _a1 int64)) *LogHandle_GetExistsReadonlySegmentHandle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *LogHandle_GetExistsReadonlySegmentHandle_Call) Return(_a0 segment.SegmentHandle, _a1 error) *LogHandle_GetExistsReadonlySegmentHandle_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LogHandle_GetExistsReadonlySegmentHandle_Call) RunAndReturn(run func(context.Context, int64) (segment.SegmentHandle, error)) *LogHandle_GetExistsReadonlySegmentHandle_Call {
	_c.Call.Return(run)
	return _c
}

// GetLastRecordId provides a mock function with given fields: _a0
func (_m *LogHandle) GetLastRecordId(_a0 context.Context) (*log.LogMessageId, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetLastRecordId")
	}

	var r0 *log.LogMessageId
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*log.LogMessageId, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *log.LogMessageId); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*log.LogMessageId)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LogHandle_GetLastRecordId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLastRecordId'
type LogHandle_GetLastRecordId_Call struct {
	*mock.Call
}

// GetLastRecordId is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *LogHandle_Expecter) GetLastRecordId(_a0 interface{}) *LogHandle_GetLastRecordId_Call {
	return &LogHandle_GetLastRecordId_Call{Call: _e.mock.On("GetLastRecordId", _a0)}
}

func (_c *LogHandle_GetLastRecordId_Call) Run(run func(_a0 context.Context)) *LogHandle_GetLastRecordId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *LogHandle_GetLastRecordId_Call) Return(_a0 *log.LogMessageId, _a1 error) *LogHandle_GetLastRecordId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LogHandle_GetLastRecordId_Call) RunAndReturn(run func(context.Context) (*log.LogMessageId, error)) *LogHandle_GetLastRecordId_Call {
	_c.Call.Return(run)
	return _c
}

// GetMetadataProvider provides a mock function with given fields:
func (_m *LogHandle) GetMetadataProvider() meta.MetadataProvider {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetMetadataProvider")
	}

	var r0 meta.MetadataProvider
	if rf, ok := ret.Get(0).(func() meta.MetadataProvider); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(meta.MetadataProvider)
		}
	}

	return r0
}

// LogHandle_GetMetadataProvider_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMetadataProvider'
type LogHandle_GetMetadataProvider_Call struct {
	*mock.Call
}

// GetMetadataProvider is a helper method to define mock.On call
func (_e *LogHandle_Expecter) GetMetadataProvider() *LogHandle_GetMetadataProvider_Call {
	return &LogHandle_GetMetadataProvider_Call{Call: _e.mock.On("GetMetadataProvider")}
}

func (_c *LogHandle_GetMetadataProvider_Call) Run(run func()) *LogHandle_GetMetadataProvider_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *LogHandle_GetMetadataProvider_Call) Return(_a0 meta.MetadataProvider) *LogHandle_GetMetadataProvider_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LogHandle_GetMetadataProvider_Call) RunAndReturn(run func() meta.MetadataProvider) *LogHandle_GetMetadataProvider_Call {
	_c.Call.Return(run)
	return _c
}

// GetName provides a mock function with given fields:
func (_m *LogHandle) GetName() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetName")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// LogHandle_GetName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetName'
type LogHandle_GetName_Call struct {
	*mock.Call
}

// GetName is a helper method to define mock.On call
func (_e *LogHandle_Expecter) GetName() *LogHandle_GetName_Call {
	return &LogHandle_GetName_Call{Call: _e.mock.On("GetName")}
}

func (_c *LogHandle_GetName_Call) Run(run func()) *LogHandle_GetName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *LogHandle_GetName_Call) Return(_a0 string) *LogHandle_GetName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LogHandle_GetName_Call) RunAndReturn(run func() string) *LogHandle_GetName_Call {
	_c.Call.Return(run)
	return _c
}

// GetNextSegmentId provides a mock function with given fields:
func (_m *LogHandle) GetNextSegmentId() (int64, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetNextSegmentId")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func() (int64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LogHandle_GetNextSegmentId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNextSegmentId'
type LogHandle_GetNextSegmentId_Call struct {
	*mock.Call
}

// GetNextSegmentId is a helper method to define mock.On call
func (_e *LogHandle_Expecter) GetNextSegmentId() *LogHandle_GetNextSegmentId_Call {
	return &LogHandle_GetNextSegmentId_Call{Call: _e.mock.On("GetNextSegmentId")}
}

func (_c *LogHandle_GetNextSegmentId_Call) Run(run func()) *LogHandle_GetNextSegmentId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *LogHandle_GetNextSegmentId_Call) Return(_a0 int64, _a1 error) *LogHandle_GetNextSegmentId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LogHandle_GetNextSegmentId_Call) RunAndReturn(run func() (int64, error)) *LogHandle_GetNextSegmentId_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrCreateWritableSegmentHandle provides a mock function with given fields: _a0
func (_m *LogHandle) GetOrCreateWritableSegmentHandle(_a0 context.Context) (segment.SegmentHandle, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetOrCreateWritableSegmentHandle")
	}

	var r0 segment.SegmentHandle
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (segment.SegmentHandle, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) segment.SegmentHandle); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(segment.SegmentHandle)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LogHandle_GetOrCreateWritableSegmentHandle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrCreateWritableSegmentHandle'
type LogHandle_GetOrCreateWritableSegmentHandle_Call struct {
	*mock.Call
}

// GetOrCreateWritableSegmentHandle is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *LogHandle_Expecter) GetOrCreateWritableSegmentHandle(_a0 interface{}) *LogHandle_GetOrCreateWritableSegmentHandle_Call {
	return &LogHandle_GetOrCreateWritableSegmentHandle_Call{Call: _e.mock.On("GetOrCreateWritableSegmentHandle", _a0)}
}

func (_c *LogHandle_GetOrCreateWritableSegmentHandle_Call) Run(run func(_a0 context.Context)) *LogHandle_GetOrCreateWritableSegmentHandle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *LogHandle_GetOrCreateWritableSegmentHandle_Call) Return(_a0 segment.SegmentHandle, _a1 error) *LogHandle_GetOrCreateWritableSegmentHandle_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LogHandle_GetOrCreateWritableSegmentHandle_Call) RunAndReturn(run func(context.Context) (segment.SegmentHandle, error)) *LogHandle_GetOrCreateWritableSegmentHandle_Call {
	_c.Call.Return(run)
	return _c
}

// GetRecoverableSegmentHandle provides a mock function with given fields: _a0, _a1
func (_m *LogHandle) GetRecoverableSegmentHandle(_a0 context.Context, _a1 int64) (segment.SegmentHandle, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetRecoverableSegmentHandle")
	}

	var r0 segment.SegmentHandle
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (segment.SegmentHandle, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) segment.SegmentHandle); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(segment.SegmentHandle)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LogHandle_GetRecoverableSegmentHandle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRecoverableSegmentHandle'
type LogHandle_GetRecoverableSegmentHandle_Call struct {
	*mock.Call
}

// GetRecoverableSegmentHandle is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 int64
func (_e *LogHandle_Expecter) GetRecoverableSegmentHandle(_a0 interface{}, _a1 interface{}) *LogHandle_GetRecoverableSegmentHandle_Call {
	return &LogHandle_GetRecoverableSegmentHandle_Call{Call: _e.mock.On("GetRecoverableSegmentHandle", _a0, _a1)}
}

func (_c *LogHandle_GetRecoverableSegmentHandle_Call) Run(run func(_a0 context.Context, _a1 int64)) *LogHandle_GetRecoverableSegmentHandle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *LogHandle_GetRecoverableSegmentHandle_Call) Return(_a0 segment.SegmentHandle, _a1 error) *LogHandle_GetRecoverableSegmentHandle_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LogHandle_GetRecoverableSegmentHandle_Call) RunAndReturn(run func(context.Context, int64) (segment.SegmentHandle, error)) *LogHandle_GetRecoverableSegmentHandle_Call {
	_c.Call.Return(run)
	return _c
}

// GetSegments provides a mock function with given fields: _a0
func (_m *LogHandle) GetSegments(_a0 context.Context) (map[int64]*proto.SegmentMetadata, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetSegments")
	}

	var r0 map[int64]*proto.SegmentMetadata
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (map[int64]*proto.SegmentMetadata, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) map[int64]*proto.SegmentMetadata); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[int64]*proto.SegmentMetadata)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LogHandle_GetSegments_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSegments'
type LogHandle_GetSegments_Call struct {
	*mock.Call
}

// GetSegments is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *LogHandle_Expecter) GetSegments(_a0 interface{}) *LogHandle_GetSegments_Call {
	return &LogHandle_GetSegments_Call{Call: _e.mock.On("GetSegments", _a0)}
}

func (_c *LogHandle_GetSegments_Call) Run(run func(_a0 context.Context)) *LogHandle_GetSegments_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *LogHandle_GetSegments_Call) Return(_a0 map[int64]*proto.SegmentMetadata, _a1 error) *LogHandle_GetSegments_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LogHandle_GetSegments_Call) RunAndReturn(run func(context.Context) (map[int64]*proto.SegmentMetadata, error)) *LogHandle_GetSegments_Call {
	_c.Call.Return(run)
	return _c
}

// OpenLogReader provides a mock function with given fields: _a0, _a1
func (_m *LogHandle) OpenLogReader(_a0 context.Context, _a1 *log.LogMessageId) (log.LogReader, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for OpenLogReader")
	}

	var r0 log.LogReader
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *log.LogMessageId) (log.LogReader, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *log.LogMessageId) log.LogReader); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(log.LogReader)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *log.LogMessageId) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LogHandle_OpenLogReader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OpenLogReader'
type LogHandle_OpenLogReader_Call struct {
	*mock.Call
}

// OpenLogReader is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *log.LogMessageId
func (_e *LogHandle_Expecter) OpenLogReader(_a0 interface{}, _a1 interface{}) *LogHandle_OpenLogReader_Call {
	return &LogHandle_OpenLogReader_Call{Call: _e.mock.On("OpenLogReader", _a0, _a1)}
}

func (_c *LogHandle_OpenLogReader_Call) Run(run func(_a0 context.Context, _a1 *log.LogMessageId)) *LogHandle_OpenLogReader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*log.LogMessageId))
	})
	return _c
}

func (_c *LogHandle_OpenLogReader_Call) Return(_a0 log.LogReader, _a1 error) *LogHandle_OpenLogReader_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LogHandle_OpenLogReader_Call) RunAndReturn(run func(context.Context, *log.LogMessageId) (log.LogReader, error)) *LogHandle_OpenLogReader_Call {
	_c.Call.Return(run)
	return _c
}

// OpenLogWriter provides a mock function with given fields: _a0
func (_m *LogHandle) OpenLogWriter(_a0 context.Context) (log.LogWriter, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for OpenLogWriter")
	}

	var r0 log.LogWriter
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (log.LogWriter, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) log.LogWriter); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(log.LogWriter)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LogHandle_OpenLogWriter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OpenLogWriter'
type LogHandle_OpenLogWriter_Call struct {
	*mock.Call
}

// OpenLogWriter is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *LogHandle_Expecter) OpenLogWriter(_a0 interface{}) *LogHandle_OpenLogWriter_Call {
	return &LogHandle_OpenLogWriter_Call{Call: _e.mock.On("OpenLogWriter", _a0)}
}

func (_c *LogHandle_OpenLogWriter_Call) Run(run func(_a0 context.Context)) *LogHandle_OpenLogWriter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *LogHandle_OpenLogWriter_Call) Return(_a0 log.LogWriter, _a1 error) *LogHandle_OpenLogWriter_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LogHandle_OpenLogWriter_Call) RunAndReturn(run func(context.Context) (log.LogWriter, error)) *LogHandle_OpenLogWriter_Call {
	_c.Call.Return(run)
	return _c
}

// Truncate provides a mock function with given fields: _a0, _a1
func (_m *LogHandle) Truncate(_a0 context.Context, _a1 int64) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Truncate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LogHandle_Truncate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Truncate'
type LogHandle_Truncate_Call struct {
	*mock.Call
}

// Truncate is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 int64
func (_e *LogHandle_Expecter) Truncate(_a0 interface{}, _a1 interface{}) *LogHandle_Truncate_Call {
	return &LogHandle_Truncate_Call{Call: _e.mock.On("Truncate", _a0, _a1)}
}

func (_c *LogHandle_Truncate_Call) Run(run func(_a0 context.Context, _a1 int64)) *LogHandle_Truncate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *LogHandle_Truncate_Call) Return(_a0 error) *LogHandle_Truncate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LogHandle_Truncate_Call) RunAndReturn(run func(context.Context, int64) error) *LogHandle_Truncate_Call {
	_c.Call.Return(run)
	return _c
}

// NewLogHandle creates a new instance of LogHandle. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLogHandle(t interface {
	mock.TestingT
	Cleanup(func())
}) *LogHandle {
	mock := &LogHandle{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
