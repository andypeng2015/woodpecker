// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks_log_handle

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	log "github.com/zilliztech/woodpecker/woodpecker/log"
)

// LogWriter is an autogenerated mock type for the LogWriter type
type LogWriter struct {
	mock.Mock
}

type LogWriter_Expecter struct {
	mock *mock.Mock
}

func (_m *LogWriter) EXPECT() *LogWriter_Expecter {
	return &LogWriter_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields: ctx
func (_m *LogWriter) Close(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LogWriter_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type LogWriter_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
//   - ctx context.Context
func (_e *LogWriter_Expecter) Close(ctx interface{}) *LogWriter_Close_Call {
	return &LogWriter_Close_Call{Call: _e.mock.On("Close", ctx)}
}

func (_c *LogWriter_Close_Call) Run(run func(ctx context.Context)) *LogWriter_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *LogWriter_Close_Call) Return(_a0 error) *LogWriter_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LogWriter_Close_Call) RunAndReturn(run func(context.Context) error) *LogWriter_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Write provides a mock function with given fields: ctx, msg
func (_m *LogWriter) Write(ctx context.Context, msg *log.WriteMessage) *log.WriteResult {
	ret := _m.Called(ctx, msg)

	if len(ret) == 0 {
		panic("no return value specified for Write")
	}

	var r0 *log.WriteResult
	if rf, ok := ret.Get(0).(func(context.Context, *log.WriteMessage) *log.WriteResult); ok {
		r0 = rf(ctx, msg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*log.WriteResult)
		}
	}

	return r0
}

// LogWriter_Write_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Write'
type LogWriter_Write_Call struct {
	*mock.Call
}

// Write is a helper method to define mock.On call
//   - ctx context.Context
//   - msg *log.WriteMessage
func (_e *LogWriter_Expecter) Write(ctx interface{}, msg interface{}) *LogWriter_Write_Call {
	return &LogWriter_Write_Call{Call: _e.mock.On("Write", ctx, msg)}
}

func (_c *LogWriter_Write_Call) Run(run func(ctx context.Context, msg *log.WriteMessage)) *LogWriter_Write_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*log.WriteMessage))
	})
	return _c
}

func (_c *LogWriter_Write_Call) Return(_a0 *log.WriteResult) *LogWriter_Write_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LogWriter_Write_Call) RunAndReturn(run func(context.Context, *log.WriteMessage) *log.WriteResult) *LogWriter_Write_Call {
	_c.Call.Return(run)
	return _c
}

// WriteAsync provides a mock function with given fields: ctx, msg
func (_m *LogWriter) WriteAsync(ctx context.Context, msg *log.WriteMessage) <-chan *log.WriteResult {
	ret := _m.Called(ctx, msg)

	if len(ret) == 0 {
		panic("no return value specified for WriteAsync")
	}

	var r0 <-chan *log.WriteResult
	if rf, ok := ret.Get(0).(func(context.Context, *log.WriteMessage) <-chan *log.WriteResult); ok {
		r0 = rf(ctx, msg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan *log.WriteResult)
		}
	}

	return r0
}

// LogWriter_WriteAsync_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteAsync'
type LogWriter_WriteAsync_Call struct {
	*mock.Call
}

// WriteAsync is a helper method to define mock.On call
//   - ctx context.Context
//   - msg *log.WriteMessage
func (_e *LogWriter_Expecter) WriteAsync(ctx interface{}, msg interface{}) *LogWriter_WriteAsync_Call {
	return &LogWriter_WriteAsync_Call{Call: _e.mock.On("WriteAsync", ctx, msg)}
}

func (_c *LogWriter_WriteAsync_Call) Run(run func(ctx context.Context, msg *log.WriteMessage)) *LogWriter_WriteAsync_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*log.WriteMessage))
	})
	return _c
}

func (_c *LogWriter_WriteAsync_Call) Return(_a0 <-chan *log.WriteResult) *LogWriter_WriteAsync_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LogWriter_WriteAsync_Call) RunAndReturn(run func(context.Context, *log.WriteMessage) <-chan *log.WriteResult) *LogWriter_WriteAsync_Call {
	_c.Call.Return(run)
	return _c
}

// NewLogWriter creates a new instance of LogWriter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLogWriter(t interface {
	mock.TestingT
	Cleanup(func())
}) *LogWriter {
	mock := &LogWriter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
