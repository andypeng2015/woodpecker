// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks_objectstorage

import (
	context "context"
	io "io"

	mock "github.com/stretchr/testify/mock"
	minio "github.com/zilliztech/woodpecker/common/minio"

	objectstorage "github.com/zilliztech/woodpecker/common/objectstorage"
)

// ObjectStorage is an autogenerated mock type for the ObjectStorage type
type ObjectStorage struct {
	mock.Mock
}

type ObjectStorage_Expecter struct {
	mock *mock.Mock
}

func (_m *ObjectStorage) EXPECT() *ObjectStorage_Expecter {
	return &ObjectStorage_Expecter{mock: &_m.Mock}
}

// GetObject provides a mock function with given fields: ctx, bucketName, objectName, offset, size
func (_m *ObjectStorage) GetObject(ctx context.Context, bucketName string, objectName string, offset int64, size int64) (minio.FileReader, error) {
	ret := _m.Called(ctx, bucketName, objectName, offset, size)

	if len(ret) == 0 {
		panic("no return value specified for GetObject")
	}

	var r0 minio.FileReader
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int64, int64) (minio.FileReader, error)); ok {
		return rf(ctx, bucketName, objectName, offset, size)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int64, int64) minio.FileReader); ok {
		r0 = rf(ctx, bucketName, objectName, offset, size)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(minio.FileReader)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, int64, int64) error); ok {
		r1 = rf(ctx, bucketName, objectName, offset, size)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ObjectStorage_GetObject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetObject'
type ObjectStorage_GetObject_Call struct {
	*mock.Call
}

// GetObject is a helper method to define mock.On call
//   - ctx context.Context
//   - bucketName string
//   - objectName string
//   - offset int64
//   - size int64
func (_e *ObjectStorage_Expecter) GetObject(ctx interface{}, bucketName interface{}, objectName interface{}, offset interface{}, size interface{}) *ObjectStorage_GetObject_Call {
	return &ObjectStorage_GetObject_Call{Call: _e.mock.On("GetObject", ctx, bucketName, objectName, offset, size)}
}

func (_c *ObjectStorage_GetObject_Call) Run(run func(ctx context.Context, bucketName string, objectName string, offset int64, size int64)) *ObjectStorage_GetObject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(int64), args[4].(int64))
	})
	return _c
}

func (_c *ObjectStorage_GetObject_Call) Return(_a0 minio.FileReader, _a1 error) *ObjectStorage_GetObject_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ObjectStorage_GetObject_Call) RunAndReturn(run func(context.Context, string, string, int64, int64) (minio.FileReader, error)) *ObjectStorage_GetObject_Call {
	_c.Call.Return(run)
	return _c
}

// IsObjectNotExistsError provides a mock function with given fields: err
func (_m *ObjectStorage) IsObjectNotExistsError(err error) bool {
	ret := _m.Called(err)

	if len(ret) == 0 {
		panic("no return value specified for IsObjectNotExistsError")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(error) bool); ok {
		r0 = rf(err)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ObjectStorage_IsObjectNotExistsError_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsObjectNotExistsError'
type ObjectStorage_IsObjectNotExistsError_Call struct {
	*mock.Call
}

// IsObjectNotExistsError is a helper method to define mock.On call
//   - err error
func (_e *ObjectStorage_Expecter) IsObjectNotExistsError(err interface{}) *ObjectStorage_IsObjectNotExistsError_Call {
	return &ObjectStorage_IsObjectNotExistsError_Call{Call: _e.mock.On("IsObjectNotExistsError", err)}
}

func (_c *ObjectStorage_IsObjectNotExistsError_Call) Run(run func(err error)) *ObjectStorage_IsObjectNotExistsError_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(error))
	})
	return _c
}

func (_c *ObjectStorage_IsObjectNotExistsError_Call) Return(_a0 bool) *ObjectStorage_IsObjectNotExistsError_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ObjectStorage_IsObjectNotExistsError_Call) RunAndReturn(run func(error) bool) *ObjectStorage_IsObjectNotExistsError_Call {
	_c.Call.Return(run)
	return _c
}

// IsPreconditionFailedError provides a mock function with given fields: err
func (_m *ObjectStorage) IsPreconditionFailedError(err error) bool {
	ret := _m.Called(err)

	if len(ret) == 0 {
		panic("no return value specified for IsPreconditionFailedError")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(error) bool); ok {
		r0 = rf(err)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ObjectStorage_IsPreconditionFailedError_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsPreconditionFailedError'
type ObjectStorage_IsPreconditionFailedError_Call struct {
	*mock.Call
}

// IsPreconditionFailedError is a helper method to define mock.On call
//   - err error
func (_e *ObjectStorage_Expecter) IsPreconditionFailedError(err interface{}) *ObjectStorage_IsPreconditionFailedError_Call {
	return &ObjectStorage_IsPreconditionFailedError_Call{Call: _e.mock.On("IsPreconditionFailedError", err)}
}

func (_c *ObjectStorage_IsPreconditionFailedError_Call) Run(run func(err error)) *ObjectStorage_IsPreconditionFailedError_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(error))
	})
	return _c
}

func (_c *ObjectStorage_IsPreconditionFailedError_Call) Return(_a0 bool) *ObjectStorage_IsPreconditionFailedError_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ObjectStorage_IsPreconditionFailedError_Call) RunAndReturn(run func(error) bool) *ObjectStorage_IsPreconditionFailedError_Call {
	_c.Call.Return(run)
	return _c
}

// PutFencedObject provides a mock function with given fields: ctx, bucketName, objectName
func (_m *ObjectStorage) PutFencedObject(ctx context.Context, bucketName string, objectName string) error {
	ret := _m.Called(ctx, bucketName, objectName)

	if len(ret) == 0 {
		panic("no return value specified for PutFencedObject")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, bucketName, objectName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ObjectStorage_PutFencedObject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutFencedObject'
type ObjectStorage_PutFencedObject_Call struct {
	*mock.Call
}

// PutFencedObject is a helper method to define mock.On call
//   - ctx context.Context
//   - bucketName string
//   - objectName string
func (_e *ObjectStorage_Expecter) PutFencedObject(ctx interface{}, bucketName interface{}, objectName interface{}) *ObjectStorage_PutFencedObject_Call {
	return &ObjectStorage_PutFencedObject_Call{Call: _e.mock.On("PutFencedObject", ctx, bucketName, objectName)}
}

func (_c *ObjectStorage_PutFencedObject_Call) Run(run func(ctx context.Context, bucketName string, objectName string)) *ObjectStorage_PutFencedObject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *ObjectStorage_PutFencedObject_Call) Return(_a0 error) *ObjectStorage_PutFencedObject_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ObjectStorage_PutFencedObject_Call) RunAndReturn(run func(context.Context, string, string) error) *ObjectStorage_PutFencedObject_Call {
	_c.Call.Return(run)
	return _c
}

// PutObject provides a mock function with given fields: ctx, bucketName, objectName, reader, objectSize
func (_m *ObjectStorage) PutObject(ctx context.Context, bucketName string, objectName string, reader io.Reader, objectSize int64) error {
	ret := _m.Called(ctx, bucketName, objectName, reader, objectSize)

	if len(ret) == 0 {
		panic("no return value specified for PutObject")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, int64) error); ok {
		r0 = rf(ctx, bucketName, objectName, reader, objectSize)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ObjectStorage_PutObject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutObject'
type ObjectStorage_PutObject_Call struct {
	*mock.Call
}

// PutObject is a helper method to define mock.On call
//   - ctx context.Context
//   - bucketName string
//   - objectName string
//   - reader io.Reader
//   - objectSize int64
func (_e *ObjectStorage_Expecter) PutObject(ctx interface{}, bucketName interface{}, objectName interface{}, reader interface{}, objectSize interface{}) *ObjectStorage_PutObject_Call {
	return &ObjectStorage_PutObject_Call{Call: _e.mock.On("PutObject", ctx, bucketName, objectName, reader, objectSize)}
}

func (_c *ObjectStorage_PutObject_Call) Run(run func(ctx context.Context, bucketName string, objectName string, reader io.Reader, objectSize int64)) *ObjectStorage_PutObject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(io.Reader), args[4].(int64))
	})
	return _c
}

func (_c *ObjectStorage_PutObject_Call) Return(_a0 error) *ObjectStorage_PutObject_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ObjectStorage_PutObject_Call) RunAndReturn(run func(context.Context, string, string, io.Reader, int64) error) *ObjectStorage_PutObject_Call {
	_c.Call.Return(run)
	return _c
}

// PutObjectIfNoneMatch provides a mock function with given fields: ctx, bucketName, objectName, reader, objectSize
func (_m *ObjectStorage) PutObjectIfNoneMatch(ctx context.Context, bucketName string, objectName string, reader io.Reader, objectSize int64) error {
	ret := _m.Called(ctx, bucketName, objectName, reader, objectSize)

	if len(ret) == 0 {
		panic("no return value specified for PutObjectIfNoneMatch")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, int64) error); ok {
		r0 = rf(ctx, bucketName, objectName, reader, objectSize)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ObjectStorage_PutObjectIfNoneMatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutObjectIfNoneMatch'
type ObjectStorage_PutObjectIfNoneMatch_Call struct {
	*mock.Call
}

// PutObjectIfNoneMatch is a helper method to define mock.On call
//   - ctx context.Context
//   - bucketName string
//   - objectName string
//   - reader io.Reader
//   - objectSize int64
func (_e *ObjectStorage_Expecter) PutObjectIfNoneMatch(ctx interface{}, bucketName interface{}, objectName interface{}, reader interface{}, objectSize interface{}) *ObjectStorage_PutObjectIfNoneMatch_Call {
	return &ObjectStorage_PutObjectIfNoneMatch_Call{Call: _e.mock.On("PutObjectIfNoneMatch", ctx, bucketName, objectName, reader, objectSize)}
}

func (_c *ObjectStorage_PutObjectIfNoneMatch_Call) Run(run func(ctx context.Context, bucketName string, objectName string, reader io.Reader, objectSize int64)) *ObjectStorage_PutObjectIfNoneMatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(io.Reader), args[4].(int64))
	})
	return _c
}

func (_c *ObjectStorage_PutObjectIfNoneMatch_Call) Return(_a0 error) *ObjectStorage_PutObjectIfNoneMatch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ObjectStorage_PutObjectIfNoneMatch_Call) RunAndReturn(run func(context.Context, string, string, io.Reader, int64) error) *ObjectStorage_PutObjectIfNoneMatch_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveObject provides a mock function with given fields: ctx, bucketName, objectName
func (_m *ObjectStorage) RemoveObject(ctx context.Context, bucketName string, objectName string) error {
	ret := _m.Called(ctx, bucketName, objectName)

	if len(ret) == 0 {
		panic("no return value specified for RemoveObject")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, bucketName, objectName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ObjectStorage_RemoveObject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveObject'
type ObjectStorage_RemoveObject_Call struct {
	*mock.Call
}

// RemoveObject is a helper method to define mock.On call
//   - ctx context.Context
//   - bucketName string
//   - objectName string
func (_e *ObjectStorage_Expecter) RemoveObject(ctx interface{}, bucketName interface{}, objectName interface{}) *ObjectStorage_RemoveObject_Call {
	return &ObjectStorage_RemoveObject_Call{Call: _e.mock.On("RemoveObject", ctx, bucketName, objectName)}
}

func (_c *ObjectStorage_RemoveObject_Call) Run(run func(ctx context.Context, bucketName string, objectName string)) *ObjectStorage_RemoveObject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *ObjectStorage_RemoveObject_Call) Return(_a0 error) *ObjectStorage_RemoveObject_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ObjectStorage_RemoveObject_Call) RunAndReturn(run func(context.Context, string, string) error) *ObjectStorage_RemoveObject_Call {
	_c.Call.Return(run)
	return _c
}

// StatObject provides a mock function with given fields: ctx, bucketName, objectName
func (_m *ObjectStorage) StatObject(ctx context.Context, bucketName string, objectName string) (int64, bool, error) {
	ret := _m.Called(ctx, bucketName, objectName)

	if len(ret) == 0 {
		panic("no return value specified for StatObject")
	}

	var r0 int64
	var r1 bool
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (int64, bool, error)); ok {
		return rf(ctx, bucketName, objectName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) int64); ok {
		r0 = rf(ctx, bucketName, objectName)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) bool); ok {
		r1 = rf(ctx, bucketName, objectName)
	} else {
		r1 = ret.Get(1).(bool)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, string) error); ok {
		r2 = rf(ctx, bucketName, objectName)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ObjectStorage_StatObject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StatObject'
type ObjectStorage_StatObject_Call struct {
	*mock.Call
}

// StatObject is a helper method to define mock.On call
//   - ctx context.Context
//   - bucketName string
//   - objectName string
func (_e *ObjectStorage_Expecter) StatObject(ctx interface{}, bucketName interface{}, objectName interface{}) *ObjectStorage_StatObject_Call {
	return &ObjectStorage_StatObject_Call{Call: _e.mock.On("StatObject", ctx, bucketName, objectName)}
}

func (_c *ObjectStorage_StatObject_Call) Run(run func(ctx context.Context, bucketName string, objectName string)) *ObjectStorage_StatObject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *ObjectStorage_StatObject_Call) Return(_a0 int64, _a1 bool, _a2 error) *ObjectStorage_StatObject_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *ObjectStorage_StatObject_Call) RunAndReturn(run func(context.Context, string, string) (int64, bool, error)) *ObjectStorage_StatObject_Call {
	_c.Call.Return(run)
	return _c
}

// WalkWithObjects provides a mock function with given fields: ctx, bucketName, prefix, recursive, walkFunc
func (_m *ObjectStorage) WalkWithObjects(ctx context.Context, bucketName string, prefix string, recursive bool, walkFunc objectstorage.ChunkObjectWalkFunc) error {
	ret := _m.Called(ctx, bucketName, prefix, recursive, walkFunc)

	if len(ret) == 0 {
		panic("no return value specified for WalkWithObjects")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, bool, objectstorage.ChunkObjectWalkFunc) error); ok {
		r0 = rf(ctx, bucketName, prefix, recursive, walkFunc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ObjectStorage_WalkWithObjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WalkWithObjects'
type ObjectStorage_WalkWithObjects_Call struct {
	*mock.Call
}

// WalkWithObjects is a helper method to define mock.On call
//   - ctx context.Context
//   - bucketName string
//   - prefix string
//   - recursive bool
//   - walkFunc objectstorage.ChunkObjectWalkFunc
func (_e *ObjectStorage_Expecter) WalkWithObjects(ctx interface{}, bucketName interface{}, prefix interface{}, recursive interface{}, walkFunc interface{}) *ObjectStorage_WalkWithObjects_Call {
	return &ObjectStorage_WalkWithObjects_Call{Call: _e.mock.On("WalkWithObjects", ctx, bucketName, prefix, recursive, walkFunc)}
}

func (_c *ObjectStorage_WalkWithObjects_Call) Run(run func(ctx context.Context, bucketName string, prefix string, recursive bool, walkFunc objectstorage.ChunkObjectWalkFunc)) *ObjectStorage_WalkWithObjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(bool), args[4].(objectstorage.ChunkObjectWalkFunc))
	})
	return _c
}

func (_c *ObjectStorage_WalkWithObjects_Call) Return(_a0 error) *ObjectStorage_WalkWithObjects_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ObjectStorage_WalkWithObjects_Call) RunAndReturn(run func(context.Context, string, string, bool, objectstorage.ChunkObjectWalkFunc) error) *ObjectStorage_WalkWithObjects_Call {
	_c.Call.Return(run)
	return _c
}

// NewObjectStorage creates a new instance of ObjectStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewObjectStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *ObjectStorage {
	mock := &ObjectStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
