// Code generated by mockery v2.46.0. DO NOT EDIT.

package mocks_segment

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	proto "github.com/zilliztech/woodpecker/proto"

	segment "github.com/zilliztech/woodpecker/server/segment"
)

// SegmentProcessor is an autogenerated mock type for the SegmentProcessor type
type SegmentProcessor struct {
	mock.Mock
}

type SegmentProcessor_Expecter struct {
	mock *mock.Mock
}

func (_m *SegmentProcessor) EXPECT() *SegmentProcessor_Expecter {
	return &SegmentProcessor_Expecter{mock: &_m.Mock}
}

// AddEntry provides a mock function with given fields: _a0, _a1
func (_m *SegmentProcessor) AddEntry(_a0 context.Context, _a1 *segment.SegmentEntry) (int64, <-chan int64, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for AddEntry")
	}

	var r0 int64
	var r1 <-chan int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *segment.SegmentEntry) (int64, <-chan int64, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *segment.SegmentEntry) int64); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *segment.SegmentEntry) <-chan int64); ok {
		r1 = rf(_a0, _a1)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(<-chan int64)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, *segment.SegmentEntry) error); ok {
		r2 = rf(_a0, _a1)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SegmentProcessor_AddEntry_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddEntry'
type SegmentProcessor_AddEntry_Call struct {
	*mock.Call
}

// AddEntry is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *segment.SegmentEntry
func (_e *SegmentProcessor_Expecter) AddEntry(_a0 interface{}, _a1 interface{}) *SegmentProcessor_AddEntry_Call {
	return &SegmentProcessor_AddEntry_Call{Call: _e.mock.On("AddEntry", _a0, _a1)}
}

func (_c *SegmentProcessor_AddEntry_Call) Run(run func(_a0 context.Context, _a1 *segment.SegmentEntry)) *SegmentProcessor_AddEntry_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*segment.SegmentEntry))
	})
	return _c
}

func (_c *SegmentProcessor_AddEntry_Call) Return(_a0 int64, _a1 <-chan int64, _a2 error) *SegmentProcessor_AddEntry_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *SegmentProcessor_AddEntry_Call) RunAndReturn(run func(context.Context, *segment.SegmentEntry) (int64, <-chan int64, error)) *SegmentProcessor_AddEntry_Call {
	_c.Call.Return(run)
	return _c
}

// Clean provides a mock function with given fields: ctx, flag
func (_m *SegmentProcessor) Clean(ctx context.Context, flag int) error {
	ret := _m.Called(ctx, flag)

	if len(ret) == 0 {
		panic("no return value specified for Clean")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, flag)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SegmentProcessor_Clean_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Clean'
type SegmentProcessor_Clean_Call struct {
	*mock.Call
}

// Clean is a helper method to define mock.On call
//   - ctx context.Context
//   - flag int
func (_e *SegmentProcessor_Expecter) Clean(ctx interface{}, flag interface{}) *SegmentProcessor_Clean_Call {
	return &SegmentProcessor_Clean_Call{Call: _e.mock.On("Clean", ctx, flag)}
}

func (_c *SegmentProcessor_Clean_Call) Run(run func(ctx context.Context, flag int)) *SegmentProcessor_Clean_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *SegmentProcessor_Clean_Call) Return(_a0 error) *SegmentProcessor_Clean_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SegmentProcessor_Clean_Call) RunAndReturn(run func(context.Context, int) error) *SegmentProcessor_Clean_Call {
	_c.Call.Return(run)
	return _c
}

// Compact provides a mock function with given fields: ctx
func (_m *SegmentProcessor) Compact(ctx context.Context) (*proto.SegmentMetadata, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Compact")
	}

	var r0 *proto.SegmentMetadata
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*proto.SegmentMetadata, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *proto.SegmentMetadata); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.SegmentMetadata)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SegmentProcessor_Compact_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Compact'
type SegmentProcessor_Compact_Call struct {
	*mock.Call
}

// Compact is a helper method to define mock.On call
//   - ctx context.Context
func (_e *SegmentProcessor_Expecter) Compact(ctx interface{}) *SegmentProcessor_Compact_Call {
	return &SegmentProcessor_Compact_Call{Call: _e.mock.On("Compact", ctx)}
}

func (_c *SegmentProcessor_Compact_Call) Run(run func(ctx context.Context)) *SegmentProcessor_Compact_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *SegmentProcessor_Compact_Call) Return(_a0 *proto.SegmentMetadata, _a1 error) *SegmentProcessor_Compact_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SegmentProcessor_Compact_Call) RunAndReturn(run func(context.Context) (*proto.SegmentMetadata, error)) *SegmentProcessor_Compact_Call {
	_c.Call.Return(run)
	return _c
}

// GetLogId provides a mock function with given fields:
func (_m *SegmentProcessor) GetLogId() int64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLogId")
	}

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// SegmentProcessor_GetLogId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLogId'
type SegmentProcessor_GetLogId_Call struct {
	*mock.Call
}

// GetLogId is a helper method to define mock.On call
func (_e *SegmentProcessor_Expecter) GetLogId() *SegmentProcessor_GetLogId_Call {
	return &SegmentProcessor_GetLogId_Call{Call: _e.mock.On("GetLogId")}
}

func (_c *SegmentProcessor_GetLogId_Call) Run(run func()) *SegmentProcessor_GetLogId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *SegmentProcessor_GetLogId_Call) Return(_a0 int64) *SegmentProcessor_GetLogId_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SegmentProcessor_GetLogId_Call) RunAndReturn(run func() int64) *SegmentProcessor_GetLogId_Call {
	_c.Call.Return(run)
	return _c
}

// GetSegmentId provides a mock function with given fields:
func (_m *SegmentProcessor) GetSegmentId() int64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSegmentId")
	}

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// SegmentProcessor_GetSegmentId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSegmentId'
type SegmentProcessor_GetSegmentId_Call struct {
	*mock.Call
}

// GetSegmentId is a helper method to define mock.On call
func (_e *SegmentProcessor_Expecter) GetSegmentId() *SegmentProcessor_GetSegmentId_Call {
	return &SegmentProcessor_GetSegmentId_Call{Call: _e.mock.On("GetSegmentId")}
}

func (_c *SegmentProcessor_GetSegmentId_Call) Run(run func()) *SegmentProcessor_GetSegmentId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *SegmentProcessor_GetSegmentId_Call) Return(_a0 int64) *SegmentProcessor_GetSegmentId_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SegmentProcessor_GetSegmentId_Call) RunAndReturn(run func() int64) *SegmentProcessor_GetSegmentId_Call {
	_c.Call.Return(run)
	return _c
}

// GetSegmentLastAddConfirmed provides a mock function with given fields: ctx
func (_m *SegmentProcessor) GetSegmentLastAddConfirmed(ctx context.Context) (int64, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetSegmentLastAddConfirmed")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (int64, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) int64); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SegmentProcessor_GetSegmentLastAddConfirmed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSegmentLastAddConfirmed'
type SegmentProcessor_GetSegmentLastAddConfirmed_Call struct {
	*mock.Call
}

// GetSegmentLastAddConfirmed is a helper method to define mock.On call
//   - ctx context.Context
func (_e *SegmentProcessor_Expecter) GetSegmentLastAddConfirmed(ctx interface{}) *SegmentProcessor_GetSegmentLastAddConfirmed_Call {
	return &SegmentProcessor_GetSegmentLastAddConfirmed_Call{Call: _e.mock.On("GetSegmentLastAddConfirmed", ctx)}
}

func (_c *SegmentProcessor_GetSegmentLastAddConfirmed_Call) Run(run func(ctx context.Context)) *SegmentProcessor_GetSegmentLastAddConfirmed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *SegmentProcessor_GetSegmentLastAddConfirmed_Call) Return(_a0 int64, _a1 error) *SegmentProcessor_GetSegmentLastAddConfirmed_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SegmentProcessor_GetSegmentLastAddConfirmed_Call) RunAndReturn(run func(context.Context) (int64, error)) *SegmentProcessor_GetSegmentLastAddConfirmed_Call {
	_c.Call.Return(run)
	return _c
}

// IsFenced provides a mock function with given fields:
func (_m *SegmentProcessor) IsFenced() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsFenced")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// SegmentProcessor_IsFenced_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsFenced'
type SegmentProcessor_IsFenced_Call struct {
	*mock.Call
}

// IsFenced is a helper method to define mock.On call
func (_e *SegmentProcessor_Expecter) IsFenced() *SegmentProcessor_IsFenced_Call {
	return &SegmentProcessor_IsFenced_Call{Call: _e.mock.On("IsFenced")}
}

func (_c *SegmentProcessor_IsFenced_Call) Run(run func()) *SegmentProcessor_IsFenced_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *SegmentProcessor_IsFenced_Call) Return(_a0 bool) *SegmentProcessor_IsFenced_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SegmentProcessor_IsFenced_Call) RunAndReturn(run func() bool) *SegmentProcessor_IsFenced_Call {
	_c.Call.Return(run)
	return _c
}

// ReadEntry provides a mock function with given fields: _a0, _a1
func (_m *SegmentProcessor) ReadEntry(_a0 context.Context, _a1 int64) (*segment.SegmentEntry, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ReadEntry")
	}

	var r0 *segment.SegmentEntry
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*segment.SegmentEntry, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *segment.SegmentEntry); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*segment.SegmentEntry)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SegmentProcessor_ReadEntry_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadEntry'
type SegmentProcessor_ReadEntry_Call struct {
	*mock.Call
}

// ReadEntry is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 int64
func (_e *SegmentProcessor_Expecter) ReadEntry(_a0 interface{}, _a1 interface{}) *SegmentProcessor_ReadEntry_Call {
	return &SegmentProcessor_ReadEntry_Call{Call: _e.mock.On("ReadEntry", _a0, _a1)}
}

func (_c *SegmentProcessor_ReadEntry_Call) Run(run func(_a0 context.Context, _a1 int64)) *SegmentProcessor_ReadEntry_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *SegmentProcessor_ReadEntry_Call) Return(_a0 *segment.SegmentEntry, _a1 error) *SegmentProcessor_ReadEntry_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SegmentProcessor_ReadEntry_Call) RunAndReturn(run func(context.Context, int64) (*segment.SegmentEntry, error)) *SegmentProcessor_ReadEntry_Call {
	_c.Call.Return(run)
	return _c
}

// Recover provides a mock function with given fields: ctx
func (_m *SegmentProcessor) Recover(ctx context.Context) (*proto.SegmentMetadata, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Recover")
	}

	var r0 *proto.SegmentMetadata
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*proto.SegmentMetadata, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *proto.SegmentMetadata); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.SegmentMetadata)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SegmentProcessor_Recover_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Recover'
type SegmentProcessor_Recover_Call struct {
	*mock.Call
}

// Recover is a helper method to define mock.On call
//   - ctx context.Context
func (_e *SegmentProcessor_Expecter) Recover(ctx interface{}) *SegmentProcessor_Recover_Call {
	return &SegmentProcessor_Recover_Call{Call: _e.mock.On("Recover", ctx)}
}

func (_c *SegmentProcessor_Recover_Call) Run(run func(ctx context.Context)) *SegmentProcessor_Recover_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *SegmentProcessor_Recover_Call) Return(_a0 *proto.SegmentMetadata, _a1 error) *SegmentProcessor_Recover_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SegmentProcessor_Recover_Call) RunAndReturn(run func(context.Context) (*proto.SegmentMetadata, error)) *SegmentProcessor_Recover_Call {
	_c.Call.Return(run)
	return _c
}

// SetFenced provides a mock function with given fields:
func (_m *SegmentProcessor) SetFenced() {
	_m.Called()
}

// SegmentProcessor_SetFenced_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetFenced'
type SegmentProcessor_SetFenced_Call struct {
	*mock.Call
}

// SetFenced is a helper method to define mock.On call
func (_e *SegmentProcessor_Expecter) SetFenced() *SegmentProcessor_SetFenced_Call {
	return &SegmentProcessor_SetFenced_Call{Call: _e.mock.On("SetFenced")}
}

func (_c *SegmentProcessor_SetFenced_Call) Run(run func()) *SegmentProcessor_SetFenced_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *SegmentProcessor_SetFenced_Call) Return() *SegmentProcessor_SetFenced_Call {
	_c.Call.Return()
	return _c
}

func (_c *SegmentProcessor_SetFenced_Call) RunAndReturn(run func()) *SegmentProcessor_SetFenced_Call {
	_c.Call.Return(run)
	return _c
}

// NewSegmentProcessor creates a new instance of SegmentProcessor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSegmentProcessor(t interface {
	mock.TestingT
	Cleanup(func())
}) *SegmentProcessor {
	mock := &SegmentProcessor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
