// Code generated by mockery v2.46.0. DO NOT EDIT.

package mocks_storage

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	storage "github.com/zilliztech/woodpecker/server/storage"
)

// LogFile is an autogenerated mock type for the LogFile type
type LogFile struct {
	mock.Mock
}

type LogFile_Expecter struct {
	mock *mock.Mock
}

func (_m *LogFile) EXPECT() *LogFile_Expecter {
	return &LogFile_Expecter{mock: &_m.Mock}
}

// Append provides a mock function with given fields: ctx, data
func (_m *LogFile) Append(ctx context.Context, data []byte) error {
	ret := _m.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for Append")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []byte) error); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LogFile_Append_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Append'
type LogFile_Append_Call struct {
	*mock.Call
}

// Append is a helper method to define mock.On call
//   - ctx context.Context
//   - data []byte
func (_e *LogFile_Expecter) Append(ctx interface{}, data interface{}) *LogFile_Append_Call {
	return &LogFile_Append_Call{Call: _e.mock.On("Append", ctx, data)}
}

func (_c *LogFile_Append_Call) Run(run func(ctx context.Context, data []byte)) *LogFile_Append_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]byte))
	})
	return _c
}

func (_c *LogFile_Append_Call) Return(_a0 error) *LogFile_Append_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LogFile_Append_Call) RunAndReturn(run func(context.Context, []byte) error) *LogFile_Append_Call {
	_c.Call.Return(run)
	return _c
}

// AppendAsync provides a mock function with given fields: ctx, entryId, data
func (_m *LogFile) AppendAsync(ctx context.Context, entryId int64, data []byte) (int64, <-chan int64, error) {
	ret := _m.Called(ctx, entryId, data)

	if len(ret) == 0 {
		panic("no return value specified for AppendAsync")
	}

	var r0 int64
	var r1 <-chan int64
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, []byte) (int64, <-chan int64, error)); ok {
		return rf(ctx, entryId, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, []byte) int64); ok {
		r0 = rf(ctx, entryId, data)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, []byte) <-chan int64); ok {
		r1 = rf(ctx, entryId, data)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(<-chan int64)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, int64, []byte) error); ok {
		r2 = rf(ctx, entryId, data)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// LogFile_AppendAsync_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AppendAsync'
type LogFile_AppendAsync_Call struct {
	*mock.Call
}

// AppendAsync is a helper method to define mock.On call
//   - ctx context.Context
//   - entryId int64
//   - data []byte
func (_e *LogFile_Expecter) AppendAsync(ctx interface{}, entryId interface{}, data interface{}) *LogFile_AppendAsync_Call {
	return &LogFile_AppendAsync_Call{Call: _e.mock.On("AppendAsync", ctx, entryId, data)}
}

func (_c *LogFile_AppendAsync_Call) Run(run func(ctx context.Context, entryId int64, data []byte)) *LogFile_AppendAsync_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].([]byte))
	})
	return _c
}

func (_c *LogFile_AppendAsync_Call) Return(_a0 int64, _a1 <-chan int64, _a2 error) *LogFile_AppendAsync_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *LogFile_AppendAsync_Call) RunAndReturn(run func(context.Context, int64, []byte) (int64, <-chan int64, error)) *LogFile_AppendAsync_Call {
	_c.Call.Return(run)
	return _c
}

// Close provides a mock function with given fields:
func (_m *LogFile) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LogFile_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type LogFile_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *LogFile_Expecter) Close() *LogFile_Close_Call {
	return &LogFile_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *LogFile_Close_Call) Run(run func()) *LogFile_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *LogFile_Close_Call) Return(_a0 error) *LogFile_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LogFile_Close_Call) RunAndReturn(run func() error) *LogFile_Close_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteFragments provides a mock function with given fields: ctx, flag
func (_m *LogFile) DeleteFragments(ctx context.Context, flag int) error {
	ret := _m.Called(ctx, flag)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFragments")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, flag)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LogFile_DeleteFragments_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteFragments'
type LogFile_DeleteFragments_Call struct {
	*mock.Call
}

// DeleteFragments is a helper method to define mock.On call
//   - ctx context.Context
//   - flag int
func (_e *LogFile_Expecter) DeleteFragments(ctx interface{}, flag interface{}) *LogFile_DeleteFragments_Call {
	return &LogFile_DeleteFragments_Call{Call: _e.mock.On("DeleteFragments", ctx, flag)}
}

func (_c *LogFile_DeleteFragments_Call) Run(run func(ctx context.Context, flag int)) *LogFile_DeleteFragments_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *LogFile_DeleteFragments_Call) Return(_a0 error) *LogFile_DeleteFragments_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LogFile_DeleteFragments_Call) RunAndReturn(run func(context.Context, int) error) *LogFile_DeleteFragments_Call {
	_c.Call.Return(run)
	return _c
}

// GetId provides a mock function with given fields:
func (_m *LogFile) GetId() int64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetId")
	}

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// LogFile_GetId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetId'
type LogFile_GetId_Call struct {
	*mock.Call
}

// GetId is a helper method to define mock.On call
func (_e *LogFile_Expecter) GetId() *LogFile_GetId_Call {
	return &LogFile_GetId_Call{Call: _e.mock.On("GetId")}
}

func (_c *LogFile_GetId_Call) Run(run func()) *LogFile_GetId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *LogFile_GetId_Call) Return(_a0 int64) *LogFile_GetId_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LogFile_GetId_Call) RunAndReturn(run func() int64) *LogFile_GetId_Call {
	_c.Call.Return(run)
	return _c
}

// GetLastEntryId provides a mock function with given fields:
func (_m *LogFile) GetLastEntryId() (int64, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLastEntryId")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func() (int64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LogFile_GetLastEntryId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLastEntryId'
type LogFile_GetLastEntryId_Call struct {
	*mock.Call
}

// GetLastEntryId is a helper method to define mock.On call
func (_e *LogFile_Expecter) GetLastEntryId() *LogFile_GetLastEntryId_Call {
	return &LogFile_GetLastEntryId_Call{Call: _e.mock.On("GetLastEntryId")}
}

func (_c *LogFile_GetLastEntryId_Call) Run(run func()) *LogFile_GetLastEntryId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *LogFile_GetLastEntryId_Call) Return(_a0 int64, _a1 error) *LogFile_GetLastEntryId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LogFile_GetLastEntryId_Call) RunAndReturn(run func() (int64, error)) *LogFile_GetLastEntryId_Call {
	_c.Call.Return(run)
	return _c
}

// LastFragmentId provides a mock function with given fields:
func (_m *LogFile) LastFragmentId() uint64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for LastFragmentId")
	}

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// LogFile_LastFragmentId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LastFragmentId'
type LogFile_LastFragmentId_Call struct {
	*mock.Call
}

// LastFragmentId is a helper method to define mock.On call
func (_e *LogFile_Expecter) LastFragmentId() *LogFile_LastFragmentId_Call {
	return &LogFile_LastFragmentId_Call{Call: _e.mock.On("LastFragmentId")}
}

func (_c *LogFile_LastFragmentId_Call) Run(run func()) *LogFile_LastFragmentId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *LogFile_LastFragmentId_Call) Return(_a0 uint64) *LogFile_LastFragmentId_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LogFile_LastFragmentId_Call) RunAndReturn(run func() uint64) *LogFile_LastFragmentId_Call {
	_c.Call.Return(run)
	return _c
}

// Load provides a mock function with given fields: ctx
func (_m *LogFile) Load(ctx context.Context) (int64, storage.Fragment, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Load")
	}

	var r0 int64
	var r1 storage.Fragment
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context) (int64, storage.Fragment, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) int64); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context) storage.Fragment); ok {
		r1 = rf(ctx)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(storage.Fragment)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context) error); ok {
		r2 = rf(ctx)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// LogFile_Load_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Load'
type LogFile_Load_Call struct {
	*mock.Call
}

// Load is a helper method to define mock.On call
//   - ctx context.Context
func (_e *LogFile_Expecter) Load(ctx interface{}) *LogFile_Load_Call {
	return &LogFile_Load_Call{Call: _e.mock.On("Load", ctx)}
}

func (_c *LogFile_Load_Call) Run(run func(ctx context.Context)) *LogFile_Load_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *LogFile_Load_Call) Return(_a0 int64, _a1 storage.Fragment, _a2 error) *LogFile_Load_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *LogFile_Load_Call) RunAndReturn(run func(context.Context) (int64, storage.Fragment, error)) *LogFile_Load_Call {
	_c.Call.Return(run)
	return _c
}

// Merge provides a mock function with given fields: ctx
func (_m *LogFile) Merge(ctx context.Context) ([]storage.Fragment, []int32, []int32, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Merge")
	}

	var r0 []storage.Fragment
	var r1 []int32
	var r2 []int32
	var r3 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]storage.Fragment, []int32, []int32, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []storage.Fragment); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]storage.Fragment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) []int32); ok {
		r1 = rf(ctx)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]int32)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context) []int32); ok {
		r2 = rf(ctx)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).([]int32)
		}
	}

	if rf, ok := ret.Get(3).(func(context.Context) error); ok {
		r3 = rf(ctx)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// LogFile_Merge_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Merge'
type LogFile_Merge_Call struct {
	*mock.Call
}

// Merge is a helper method to define mock.On call
//   - ctx context.Context
func (_e *LogFile_Expecter) Merge(ctx interface{}) *LogFile_Merge_Call {
	return &LogFile_Merge_Call{Call: _e.mock.On("Merge", ctx)}
}

func (_c *LogFile_Merge_Call) Run(run func(ctx context.Context)) *LogFile_Merge_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *LogFile_Merge_Call) Return(_a0 []storage.Fragment, _a1 []int32, _a2 []int32, _a3 error) *LogFile_Merge_Call {
	_c.Call.Return(_a0, _a1, _a2, _a3)
	return _c
}

func (_c *LogFile_Merge_Call) RunAndReturn(run func(context.Context) ([]storage.Fragment, []int32, []int32, error)) *LogFile_Merge_Call {
	_c.Call.Return(run)
	return _c
}

// NewReader provides a mock function with given fields: ctx, opt
func (_m *LogFile) NewReader(ctx context.Context, opt storage.ReaderOpt) (storage.Reader, error) {
	ret := _m.Called(ctx, opt)

	if len(ret) == 0 {
		panic("no return value specified for NewReader")
	}

	var r0 storage.Reader
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, storage.ReaderOpt) (storage.Reader, error)); ok {
		return rf(ctx, opt)
	}
	if rf, ok := ret.Get(0).(func(context.Context, storage.ReaderOpt) storage.Reader); ok {
		r0 = rf(ctx, opt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(storage.Reader)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, storage.ReaderOpt) error); ok {
		r1 = rf(ctx, opt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LogFile_NewReader_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NewReader'
type LogFile_NewReader_Call struct {
	*mock.Call
}

// NewReader is a helper method to define mock.On call
//   - ctx context.Context
//   - opt storage.ReaderOpt
func (_e *LogFile_Expecter) NewReader(ctx interface{}, opt interface{}) *LogFile_NewReader_Call {
	return &LogFile_NewReader_Call{Call: _e.mock.On("NewReader", ctx, opt)}
}

func (_c *LogFile_NewReader_Call) Run(run func(ctx context.Context, opt storage.ReaderOpt)) *LogFile_NewReader_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(storage.ReaderOpt))
	})
	return _c
}

func (_c *LogFile_NewReader_Call) Return(_a0 storage.Reader, _a1 error) *LogFile_NewReader_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LogFile_NewReader_Call) RunAndReturn(run func(context.Context, storage.ReaderOpt) (storage.Reader, error)) *LogFile_NewReader_Call {
	_c.Call.Return(run)
	return _c
}

// Sync provides a mock function with given fields: ctx
func (_m *LogFile) Sync(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Sync")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LogFile_Sync_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Sync'
type LogFile_Sync_Call struct {
	*mock.Call
}

// Sync is a helper method to define mock.On call
//   - ctx context.Context
func (_e *LogFile_Expecter) Sync(ctx interface{}) *LogFile_Sync_Call {
	return &LogFile_Sync_Call{Call: _e.mock.On("Sync", ctx)}
}

func (_c *LogFile_Sync_Call) Run(run func(ctx context.Context)) *LogFile_Sync_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *LogFile_Sync_Call) Return(_a0 error) *LogFile_Sync_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *LogFile_Sync_Call) RunAndReturn(run func(context.Context) error) *LogFile_Sync_Call {
	_c.Call.Return(run)
	return _c
}

// NewLogFile creates a new instance of LogFile. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLogFile(t interface {
	mock.TestingT
	Cleanup(func())
}) *LogFile {
	mock := &LogFile{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
