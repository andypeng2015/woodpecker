// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks_storage

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Fragment is an autogenerated mock type for the Fragment type
type Fragment struct {
	mock.Mock
}

type Fragment_Expecter struct {
	mock *mock.Mock
}

func (_m *Fragment) EXPECT() *Fragment_Expecter {
	return &Fragment_Expecter{mock: &_m.Mock}
}

// Flush provides a mock function with given fields: ctx
func (_m *Fragment) Flush(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Flush")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Fragment_Flush_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Flush'
type Fragment_Flush_Call struct {
	*mock.Call
}

// Flush is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Fragment_Expecter) Flush(ctx interface{}) *Fragment_Flush_Call {
	return &Fragment_Flush_Call{Call: _e.mock.On("Flush", ctx)}
}

func (_c *Fragment_Flush_Call) Run(run func(ctx context.Context)) *Fragment_Flush_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Fragment_Flush_Call) Return(_a0 error) *Fragment_Flush_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Fragment_Flush_Call) RunAndReturn(run func(context.Context) error) *Fragment_Flush_Call {
	_c.Call.Return(run)
	return _c
}

// GetEntry provides a mock function with given fields: entryId
func (_m *Fragment) GetEntry(entryId int64) ([]byte, error) {
	ret := _m.Called(entryId)

	if len(ret) == 0 {
		panic("no return value specified for GetEntry")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) ([]byte, error)); ok {
		return rf(entryId)
	}
	if rf, ok := ret.Get(0).(func(int64) []byte); ok {
		r0 = rf(entryId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(entryId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Fragment_GetEntry_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEntry'
type Fragment_GetEntry_Call struct {
	*mock.Call
}

// GetEntry is a helper method to define mock.On call
//   - entryId int64
func (_e *Fragment_Expecter) GetEntry(entryId interface{}) *Fragment_GetEntry_Call {
	return &Fragment_GetEntry_Call{Call: _e.mock.On("GetEntry", entryId)}
}

func (_c *Fragment_GetEntry_Call) Run(run func(entryId int64)) *Fragment_GetEntry_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *Fragment_GetEntry_Call) Return(_a0 []byte, _a1 error) *Fragment_GetEntry_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Fragment_GetEntry_Call) RunAndReturn(run func(int64) ([]byte, error)) *Fragment_GetEntry_Call {
	_c.Call.Return(run)
	return _c
}

// GetFirstEntryId provides a mock function with no fields
func (_m *Fragment) GetFirstEntryId() (int64, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetFirstEntryId")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func() (int64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Fragment_GetFirstEntryId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFirstEntryId'
type Fragment_GetFirstEntryId_Call struct {
	*mock.Call
}

// GetFirstEntryId is a helper method to define mock.On call
func (_e *Fragment_Expecter) GetFirstEntryId() *Fragment_GetFirstEntryId_Call {
	return &Fragment_GetFirstEntryId_Call{Call: _e.mock.On("GetFirstEntryId")}
}

func (_c *Fragment_GetFirstEntryId_Call) Run(run func()) *Fragment_GetFirstEntryId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Fragment_GetFirstEntryId_Call) Return(_a0 int64, _a1 error) *Fragment_GetFirstEntryId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Fragment_GetFirstEntryId_Call) RunAndReturn(run func() (int64, error)) *Fragment_GetFirstEntryId_Call {
	_c.Call.Return(run)
	return _c
}

// GetFragmentId provides a mock function with no fields
func (_m *Fragment) GetFragmentId() int64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetFragmentId")
	}

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// Fragment_GetFragmentId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFragmentId'
type Fragment_GetFragmentId_Call struct {
	*mock.Call
}

// GetFragmentId is a helper method to define mock.On call
func (_e *Fragment_Expecter) GetFragmentId() *Fragment_GetFragmentId_Call {
	return &Fragment_GetFragmentId_Call{Call: _e.mock.On("GetFragmentId")}
}

func (_c *Fragment_GetFragmentId_Call) Run(run func()) *Fragment_GetFragmentId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Fragment_GetFragmentId_Call) Return(_a0 int64) *Fragment_GetFragmentId_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Fragment_GetFragmentId_Call) RunAndReturn(run func() int64) *Fragment_GetFragmentId_Call {
	_c.Call.Return(run)
	return _c
}

// GetFragmentKey provides a mock function with no fields
func (_m *Fragment) GetFragmentKey() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetFragmentKey")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Fragment_GetFragmentKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFragmentKey'
type Fragment_GetFragmentKey_Call struct {
	*mock.Call
}

// GetFragmentKey is a helper method to define mock.On call
func (_e *Fragment_Expecter) GetFragmentKey() *Fragment_GetFragmentKey_Call {
	return &Fragment_GetFragmentKey_Call{Call: _e.mock.On("GetFragmentKey")}
}

func (_c *Fragment_GetFragmentKey_Call) Run(run func()) *Fragment_GetFragmentKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Fragment_GetFragmentKey_Call) Return(_a0 string) *Fragment_GetFragmentKey_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Fragment_GetFragmentKey_Call) RunAndReturn(run func() string) *Fragment_GetFragmentKey_Call {
	_c.Call.Return(run)
	return _c
}

// GetLastEntryId provides a mock function with no fields
func (_m *Fragment) GetLastEntryId() (int64, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLastEntryId")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func() (int64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Fragment_GetLastEntryId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLastEntryId'
type Fragment_GetLastEntryId_Call struct {
	*mock.Call
}

// GetLastEntryId is a helper method to define mock.On call
func (_e *Fragment_Expecter) GetLastEntryId() *Fragment_GetLastEntryId_Call {
	return &Fragment_GetLastEntryId_Call{Call: _e.mock.On("GetLastEntryId")}
}

func (_c *Fragment_GetLastEntryId_Call) Run(run func()) *Fragment_GetLastEntryId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Fragment_GetLastEntryId_Call) Return(_a0 int64, _a1 error) *Fragment_GetLastEntryId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Fragment_GetLastEntryId_Call) RunAndReturn(run func() (int64, error)) *Fragment_GetLastEntryId_Call {
	_c.Call.Return(run)
	return _c
}

// GetLastModified provides a mock function with no fields
func (_m *Fragment) GetLastModified() int64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLastModified")
	}

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// Fragment_GetLastModified_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLastModified'
type Fragment_GetLastModified_Call struct {
	*mock.Call
}

// GetLastModified is a helper method to define mock.On call
func (_e *Fragment_Expecter) GetLastModified() *Fragment_GetLastModified_Call {
	return &Fragment_GetLastModified_Call{Call: _e.mock.On("GetLastModified")}
}

func (_c *Fragment_GetLastModified_Call) Run(run func()) *Fragment_GetLastModified_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Fragment_GetLastModified_Call) Return(_a0 int64) *Fragment_GetLastModified_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Fragment_GetLastModified_Call) RunAndReturn(run func() int64) *Fragment_GetLastModified_Call {
	_c.Call.Return(run)
	return _c
}

// GetLogId provides a mock function with no fields
func (_m *Fragment) GetLogId() int64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetLogId")
	}

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// Fragment_GetLogId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLogId'
type Fragment_GetLogId_Call struct {
	*mock.Call
}

// GetLogId is a helper method to define mock.On call
func (_e *Fragment_Expecter) GetLogId() *Fragment_GetLogId_Call {
	return &Fragment_GetLogId_Call{Call: _e.mock.On("GetLogId")}
}

func (_c *Fragment_GetLogId_Call) Run(run func()) *Fragment_GetLogId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Fragment_GetLogId_Call) Return(_a0 int64) *Fragment_GetLogId_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Fragment_GetLogId_Call) RunAndReturn(run func() int64) *Fragment_GetLogId_Call {
	_c.Call.Return(run)
	return _c
}

// GetRawBufSize provides a mock function with no fields
func (_m *Fragment) GetRawBufSize() int64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetRawBufSize")
	}

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// Fragment_GetRawBufSize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRawBufSize'
type Fragment_GetRawBufSize_Call struct {
	*mock.Call
}

// GetRawBufSize is a helper method to define mock.On call
func (_e *Fragment_Expecter) GetRawBufSize() *Fragment_GetRawBufSize_Call {
	return &Fragment_GetRawBufSize_Call{Call: _e.mock.On("GetRawBufSize")}
}

func (_c *Fragment_GetRawBufSize_Call) Run(run func()) *Fragment_GetRawBufSize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Fragment_GetRawBufSize_Call) Return(_a0 int64) *Fragment_GetRawBufSize_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Fragment_GetRawBufSize_Call) RunAndReturn(run func() int64) *Fragment_GetRawBufSize_Call {
	_c.Call.Return(run)
	return _c
}

// GetSegmentId provides a mock function with no fields
func (_m *Fragment) GetSegmentId() int64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSegmentId")
	}

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// Fragment_GetSegmentId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSegmentId'
type Fragment_GetSegmentId_Call struct {
	*mock.Call
}

// GetSegmentId is a helper method to define mock.On call
func (_e *Fragment_Expecter) GetSegmentId() *Fragment_GetSegmentId_Call {
	return &Fragment_GetSegmentId_Call{Call: _e.mock.On("GetSegmentId")}
}

func (_c *Fragment_GetSegmentId_Call) Run(run func()) *Fragment_GetSegmentId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Fragment_GetSegmentId_Call) Return(_a0 int64) *Fragment_GetSegmentId_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Fragment_GetSegmentId_Call) RunAndReturn(run func() int64) *Fragment_GetSegmentId_Call {
	_c.Call.Return(run)
	return _c
}

// GetSize provides a mock function with no fields
func (_m *Fragment) GetSize() int64 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSize")
	}

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// Fragment_GetSize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSize'
type Fragment_GetSize_Call struct {
	*mock.Call
}

// GetSize is a helper method to define mock.On call
func (_e *Fragment_Expecter) GetSize() *Fragment_GetSize_Call {
	return &Fragment_GetSize_Call{Call: _e.mock.On("GetSize")}
}

func (_c *Fragment_GetSize_Call) Run(run func()) *Fragment_GetSize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Fragment_GetSize_Call) Return(_a0 int64) *Fragment_GetSize_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Fragment_GetSize_Call) RunAndReturn(run func() int64) *Fragment_GetSize_Call {
	_c.Call.Return(run)
	return _c
}

// Load provides a mock function with given fields: ctx
func (_m *Fragment) Load(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Load")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Fragment_Load_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Load'
type Fragment_Load_Call struct {
	*mock.Call
}

// Load is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Fragment_Expecter) Load(ctx interface{}) *Fragment_Load_Call {
	return &Fragment_Load_Call{Call: _e.mock.On("Load", ctx)}
}

func (_c *Fragment_Load_Call) Run(run func(ctx context.Context)) *Fragment_Load_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Fragment_Load_Call) Return(_a0 error) *Fragment_Load_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Fragment_Load_Call) RunAndReturn(run func(context.Context) error) *Fragment_Load_Call {
	_c.Call.Return(run)
	return _c
}

// Release provides a mock function with no fields
func (_m *Fragment) Release() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Release")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Fragment_Release_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Release'
type Fragment_Release_Call struct {
	*mock.Call
}

// Release is a helper method to define mock.On call
func (_e *Fragment_Expecter) Release() *Fragment_Release_Call {
	return &Fragment_Release_Call{Call: _e.mock.On("Release")}
}

func (_c *Fragment_Release_Call) Run(run func()) *Fragment_Release_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Fragment_Release_Call) Return(_a0 error) *Fragment_Release_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Fragment_Release_Call) RunAndReturn(run func() error) *Fragment_Release_Call {
	_c.Call.Return(run)
	return _c
}

// NewFragment creates a new instance of Fragment. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFragment(t interface {
	mock.TestingT
	Cleanup(func())
}) *Fragment {
	mock := &Fragment{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
