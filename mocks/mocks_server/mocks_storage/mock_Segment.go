// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks_storage

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Segment is an autogenerated mock type for the Segment type
type Segment struct {
	mock.Mock
}

type Segment_Expecter struct {
	mock *mock.Mock
}

func (_m *Segment) EXPECT() *Segment_Expecter {
	return &Segment_Expecter{mock: &_m.Mock}
}

// DeleteFileData provides a mock function with given fields: ctx, flag
func (_m *Segment) DeleteFileData(ctx context.Context, flag int) (int, error) {
	ret := _m.Called(ctx, flag)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFileData")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (int, error)); ok {
		return rf(ctx, flag)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) int); ok {
		r0 = rf(ctx, flag)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, flag)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Segment_DeleteFileData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteFileData'
type Segment_DeleteFileData_Call struct {
	*mock.Call
}

// DeleteFileData is a helper method to define mock.On call
//   - ctx context.Context
//   - flag int
func (_e *Segment_Expecter) DeleteFileData(ctx interface{}, flag interface{}) *Segment_DeleteFileData_Call {
	return &Segment_DeleteFileData_Call{Call: _e.mock.On("DeleteFileData", ctx, flag)}
}

func (_c *Segment_DeleteFileData_Call) Run(run func(ctx context.Context, flag int)) *Segment_DeleteFileData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *Segment_DeleteFileData_Call) Return(_a0 int, _a1 error) *Segment_DeleteFileData_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Segment_DeleteFileData_Call) RunAndReturn(run func(context.Context, int) (int, error)) *Segment_DeleteFileData_Call {
	_c.Call.Return(run)
	return _c
}

// NewSegment creates a new instance of Segment. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSegment(t interface {
	mock.TestingT
	Cleanup(func())
}) *Segment {
	mock := &Segment{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
