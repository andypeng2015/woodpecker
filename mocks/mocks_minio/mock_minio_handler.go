// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks_minio

import (
	context "context"

	commonminio "github.com/zilliztech/woodpecker/common/minio"

	io "io"

	minio "github.com/minio/minio-go/v7"

	mock "github.com/stretchr/testify/mock"
)

// MinioHandler is an autogenerated mock type for the MinioHandler type
type MinioHandler struct {
	mock.Mock
}

type MinioHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *MinioHandler) EXPECT() *MinioHandler_Expecter {
	return &MinioHandler_Expecter{mock: &_m.Mock}
}

// CopyObject provides a mock function with given fields: ctx, dst, src
func (_m *MinioHandler) CopyObject(ctx context.Context, dst minio.CopyDestOptions, src minio.CopySrcOptions) (minio.UploadInfo, error) {
	ret := _m.Called(ctx, dst, src)

	if len(ret) == 0 {
		panic("no return value specified for CopyObject")
	}

	var r0 minio.UploadInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, minio.CopyDestOptions, minio.CopySrcOptions) (minio.UploadInfo, error)); ok {
		return rf(ctx, dst, src)
	}
	if rf, ok := ret.Get(0).(func(context.Context, minio.CopyDestOptions, minio.CopySrcOptions) minio.UploadInfo); ok {
		r0 = rf(ctx, dst, src)
	} else {
		r0 = ret.Get(0).(minio.UploadInfo)
	}

	if rf, ok := ret.Get(1).(func(context.Context, minio.CopyDestOptions, minio.CopySrcOptions) error); ok {
		r1 = rf(ctx, dst, src)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MinioHandler_CopyObject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CopyObject'
type MinioHandler_CopyObject_Call struct {
	*mock.Call
}

// CopyObject is a helper method to define mock.On call
//   - ctx context.Context
//   - dst minio.CopyDestOptions
//   - src minio.CopySrcOptions
func (_e *MinioHandler_Expecter) CopyObject(ctx interface{}, dst interface{}, src interface{}) *MinioHandler_CopyObject_Call {
	return &MinioHandler_CopyObject_Call{Call: _e.mock.On("CopyObject", ctx, dst, src)}
}

func (_c *MinioHandler_CopyObject_Call) Run(run func(ctx context.Context, dst minio.CopyDestOptions, src minio.CopySrcOptions)) *MinioHandler_CopyObject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(minio.CopyDestOptions), args[2].(minio.CopySrcOptions))
	})
	return _c
}

func (_c *MinioHandler_CopyObject_Call) Return(_a0 minio.UploadInfo, _a1 error) *MinioHandler_CopyObject_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MinioHandler_CopyObject_Call) RunAndReturn(run func(context.Context, minio.CopyDestOptions, minio.CopySrcOptions) (minio.UploadInfo, error)) *MinioHandler_CopyObject_Call {
	_c.Call.Return(run)
	return _c
}

// GetObject provides a mock function with given fields: ctx, bucketName, objectName, opts
func (_m *MinioHandler) GetObject(ctx context.Context, bucketName string, objectName string, opts minio.GetObjectOptions) (*minio.Object, error) {
	ret := _m.Called(ctx, bucketName, objectName, opts)

	if len(ret) == 0 {
		panic("no return value specified for GetObject")
	}

	var r0 *minio.Object
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, minio.GetObjectOptions) (*minio.Object, error)); ok {
		return rf(ctx, bucketName, objectName, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, minio.GetObjectOptions) *minio.Object); ok {
		r0 = rf(ctx, bucketName, objectName, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*minio.Object)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, minio.GetObjectOptions) error); ok {
		r1 = rf(ctx, bucketName, objectName, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MinioHandler_GetObject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetObject'
type MinioHandler_GetObject_Call struct {
	*mock.Call
}

// GetObject is a helper method to define mock.On call
//   - ctx context.Context
//   - bucketName string
//   - objectName string
//   - opts minio.GetObjectOptions
func (_e *MinioHandler_Expecter) GetObject(ctx interface{}, bucketName interface{}, objectName interface{}, opts interface{}) *MinioHandler_GetObject_Call {
	return &MinioHandler_GetObject_Call{Call: _e.mock.On("GetObject", ctx, bucketName, objectName, opts)}
}

func (_c *MinioHandler_GetObject_Call) Run(run func(ctx context.Context, bucketName string, objectName string, opts minio.GetObjectOptions)) *MinioHandler_GetObject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(minio.GetObjectOptions))
	})
	return _c
}

func (_c *MinioHandler_GetObject_Call) Return(_a0 *minio.Object, _a1 error) *MinioHandler_GetObject_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MinioHandler_GetObject_Call) RunAndReturn(run func(context.Context, string, string, minio.GetObjectOptions) (*minio.Object, error)) *MinioHandler_GetObject_Call {
	_c.Call.Return(run)
	return _c
}

// GetObjectDataAndInfo provides a mock function with given fields: ctx, bucketName, objectName, opts
func (_m *MinioHandler) GetObjectDataAndInfo(ctx context.Context, bucketName string, objectName string, opts minio.GetObjectOptions) (commonminio.ObjectReader, int64, int64, error) {
	ret := _m.Called(ctx, bucketName, objectName, opts)

	if len(ret) == 0 {
		panic("no return value specified for GetObjectDataAndInfo")
	}

	var r0 commonminio.ObjectReader
	var r1 int64
	var r2 int64
	var r3 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, minio.GetObjectOptions) (commonminio.ObjectReader, int64, int64, error)); ok {
		return rf(ctx, bucketName, objectName, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, minio.GetObjectOptions) commonminio.ObjectReader); ok {
		r0 = rf(ctx, bucketName, objectName, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(commonminio.ObjectReader)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, minio.GetObjectOptions) int64); ok {
		r1 = rf(ctx, bucketName, objectName, opts)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, string, minio.GetObjectOptions) int64); ok {
		r2 = rf(ctx, bucketName, objectName, opts)
	} else {
		r2 = ret.Get(2).(int64)
	}

	if rf, ok := ret.Get(3).(func(context.Context, string, string, minio.GetObjectOptions) error); ok {
		r3 = rf(ctx, bucketName, objectName, opts)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// MinioHandler_GetObjectDataAndInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetObjectDataAndInfo'
type MinioHandler_GetObjectDataAndInfo_Call struct {
	*mock.Call
}

// GetObjectDataAndInfo is a helper method to define mock.On call
//   - ctx context.Context
//   - bucketName string
//   - objectName string
//   - opts minio.GetObjectOptions
func (_e *MinioHandler_Expecter) GetObjectDataAndInfo(ctx interface{}, bucketName interface{}, objectName interface{}, opts interface{}) *MinioHandler_GetObjectDataAndInfo_Call {
	return &MinioHandler_GetObjectDataAndInfo_Call{Call: _e.mock.On("GetObjectDataAndInfo", ctx, bucketName, objectName, opts)}
}

func (_c *MinioHandler_GetObjectDataAndInfo_Call) Run(run func(ctx context.Context, bucketName string, objectName string, opts minio.GetObjectOptions)) *MinioHandler_GetObjectDataAndInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(minio.GetObjectOptions))
	})
	return _c
}

func (_c *MinioHandler_GetObjectDataAndInfo_Call) Return(_a0 commonminio.ObjectReader, _a1 int64, _a2 int64, _a3 error) *MinioHandler_GetObjectDataAndInfo_Call {
	_c.Call.Return(_a0, _a1, _a2, _a3)
	return _c
}

func (_c *MinioHandler_GetObjectDataAndInfo_Call) RunAndReturn(run func(context.Context, string, string, minio.GetObjectOptions) (commonminio.ObjectReader, int64, int64, error)) *MinioHandler_GetObjectDataAndInfo_Call {
	_c.Call.Return(run)
	return _c
}

// ListObjects provides a mock function with given fields: ctx, bucketName, prefix, recursive, opts
func (_m *MinioHandler) ListObjects(ctx context.Context, bucketName string, prefix string, recursive bool, opts minio.ListObjectsOptions) <-chan minio.ObjectInfo {
	ret := _m.Called(ctx, bucketName, prefix, recursive, opts)

	if len(ret) == 0 {
		panic("no return value specified for ListObjects")
	}

	var r0 <-chan minio.ObjectInfo
	if rf, ok := ret.Get(0).(func(context.Context, string, string, bool, minio.ListObjectsOptions) <-chan minio.ObjectInfo); ok {
		r0 = rf(ctx, bucketName, prefix, recursive, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan minio.ObjectInfo)
		}
	}

	return r0
}

// MinioHandler_ListObjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListObjects'
type MinioHandler_ListObjects_Call struct {
	*mock.Call
}

// ListObjects is a helper method to define mock.On call
//   - ctx context.Context
//   - bucketName string
//   - prefix string
//   - recursive bool
//   - opts minio.ListObjectsOptions
func (_e *MinioHandler_Expecter) ListObjects(ctx interface{}, bucketName interface{}, prefix interface{}, recursive interface{}, opts interface{}) *MinioHandler_ListObjects_Call {
	return &MinioHandler_ListObjects_Call{Call: _e.mock.On("ListObjects", ctx, bucketName, prefix, recursive, opts)}
}

func (_c *MinioHandler_ListObjects_Call) Run(run func(ctx context.Context, bucketName string, prefix string, recursive bool, opts minio.ListObjectsOptions)) *MinioHandler_ListObjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(bool), args[4].(minio.ListObjectsOptions))
	})
	return _c
}

func (_c *MinioHandler_ListObjects_Call) Return(_a0 <-chan minio.ObjectInfo) *MinioHandler_ListObjects_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MinioHandler_ListObjects_Call) RunAndReturn(run func(context.Context, string, string, bool, minio.ListObjectsOptions) <-chan minio.ObjectInfo) *MinioHandler_ListObjects_Call {
	_c.Call.Return(run)
	return _c
}

// PutFencedObject provides a mock function with given fields: ctx, bucketName, objectName
func (_m *MinioHandler) PutFencedObject(ctx context.Context, bucketName string, objectName string) (minio.UploadInfo, error) {
	ret := _m.Called(ctx, bucketName, objectName)

	if len(ret) == 0 {
		panic("no return value specified for PutFencedObject")
	}

	var r0 minio.UploadInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (minio.UploadInfo, error)); ok {
		return rf(ctx, bucketName, objectName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) minio.UploadInfo); ok {
		r0 = rf(ctx, bucketName, objectName)
	} else {
		r0 = ret.Get(0).(minio.UploadInfo)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, bucketName, objectName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MinioHandler_PutFencedObject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutFencedObject'
type MinioHandler_PutFencedObject_Call struct {
	*mock.Call
}

// PutFencedObject is a helper method to define mock.On call
//   - ctx context.Context
//   - bucketName string
//   - objectName string
func (_e *MinioHandler_Expecter) PutFencedObject(ctx interface{}, bucketName interface{}, objectName interface{}) *MinioHandler_PutFencedObject_Call {
	return &MinioHandler_PutFencedObject_Call{Call: _e.mock.On("PutFencedObject", ctx, bucketName, objectName)}
}

func (_c *MinioHandler_PutFencedObject_Call) Run(run func(ctx context.Context, bucketName string, objectName string)) *MinioHandler_PutFencedObject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MinioHandler_PutFencedObject_Call) Return(_a0 minio.UploadInfo, _a1 error) *MinioHandler_PutFencedObject_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MinioHandler_PutFencedObject_Call) RunAndReturn(run func(context.Context, string, string) (minio.UploadInfo, error)) *MinioHandler_PutFencedObject_Call {
	_c.Call.Return(run)
	return _c
}

// PutObject provides a mock function with given fields: ctx, bucketName, objectName, reader, objectSize, opts
func (_m *MinioHandler) PutObject(ctx context.Context, bucketName string, objectName string, reader io.Reader, objectSize int64, opts minio.PutObjectOptions) (minio.UploadInfo, error) {
	ret := _m.Called(ctx, bucketName, objectName, reader, objectSize, opts)

	if len(ret) == 0 {
		panic("no return value specified for PutObject")
	}

	var r0 minio.UploadInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, int64, minio.PutObjectOptions) (minio.UploadInfo, error)); ok {
		return rf(ctx, bucketName, objectName, reader, objectSize, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, int64, minio.PutObjectOptions) minio.UploadInfo); ok {
		r0 = rf(ctx, bucketName, objectName, reader, objectSize, opts)
	} else {
		r0 = ret.Get(0).(minio.UploadInfo)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, io.Reader, int64, minio.PutObjectOptions) error); ok {
		r1 = rf(ctx, bucketName, objectName, reader, objectSize, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MinioHandler_PutObject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutObject'
type MinioHandler_PutObject_Call struct {
	*mock.Call
}

// PutObject is a helper method to define mock.On call
//   - ctx context.Context
//   - bucketName string
//   - objectName string
//   - reader io.Reader
//   - objectSize int64
//   - opts minio.PutObjectOptions
func (_e *MinioHandler_Expecter) PutObject(ctx interface{}, bucketName interface{}, objectName interface{}, reader interface{}, objectSize interface{}, opts interface{}) *MinioHandler_PutObject_Call {
	return &MinioHandler_PutObject_Call{Call: _e.mock.On("PutObject", ctx, bucketName, objectName, reader, objectSize, opts)}
}

func (_c *MinioHandler_PutObject_Call) Run(run func(ctx context.Context, bucketName string, objectName string, reader io.Reader, objectSize int64, opts minio.PutObjectOptions)) *MinioHandler_PutObject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(io.Reader), args[4].(int64), args[5].(minio.PutObjectOptions))
	})
	return _c
}

func (_c *MinioHandler_PutObject_Call) Return(_a0 minio.UploadInfo, _a1 error) *MinioHandler_PutObject_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MinioHandler_PutObject_Call) RunAndReturn(run func(context.Context, string, string, io.Reader, int64, minio.PutObjectOptions) (minio.UploadInfo, error)) *MinioHandler_PutObject_Call {
	_c.Call.Return(run)
	return _c
}

// PutObjectIfNotMatch provides a mock function with given fields: ctx, bucketName, objectName, reader, objectSize
func (_m *MinioHandler) PutObjectIfNotMatch(ctx context.Context, bucketName string, objectName string, reader io.Reader, objectSize int64) (minio.UploadInfo, error) {
	ret := _m.Called(ctx, bucketName, objectName, reader, objectSize)

	if len(ret) == 0 {
		panic("no return value specified for PutObjectIfNotMatch")
	}

	var r0 minio.UploadInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, int64) (minio.UploadInfo, error)); ok {
		return rf(ctx, bucketName, objectName, reader, objectSize)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, int64) minio.UploadInfo); ok {
		r0 = rf(ctx, bucketName, objectName, reader, objectSize)
	} else {
		r0 = ret.Get(0).(minio.UploadInfo)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, io.Reader, int64) error); ok {
		r1 = rf(ctx, bucketName, objectName, reader, objectSize)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MinioHandler_PutObjectIfNotMatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutObjectIfNotMatch'
type MinioHandler_PutObjectIfNotMatch_Call struct {
	*mock.Call
}

// PutObjectIfNotMatch is a helper method to define mock.On call
//   - ctx context.Context
//   - bucketName string
//   - objectName string
//   - reader io.Reader
//   - objectSize int64
func (_e *MinioHandler_Expecter) PutObjectIfNotMatch(ctx interface{}, bucketName interface{}, objectName interface{}, reader interface{}, objectSize interface{}) *MinioHandler_PutObjectIfNotMatch_Call {
	return &MinioHandler_PutObjectIfNotMatch_Call{Call: _e.mock.On("PutObjectIfNotMatch", ctx, bucketName, objectName, reader, objectSize)}
}

func (_c *MinioHandler_PutObjectIfNotMatch_Call) Run(run func(ctx context.Context, bucketName string, objectName string, reader io.Reader, objectSize int64)) *MinioHandler_PutObjectIfNotMatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(io.Reader), args[4].(int64))
	})
	return _c
}

func (_c *MinioHandler_PutObjectIfNotMatch_Call) Return(_a0 minio.UploadInfo, _a1 error) *MinioHandler_PutObjectIfNotMatch_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MinioHandler_PutObjectIfNotMatch_Call) RunAndReturn(run func(context.Context, string, string, io.Reader, int64) (minio.UploadInfo, error)) *MinioHandler_PutObjectIfNotMatch_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveObject provides a mock function with given fields: ctx, bucketName, objectName, opts
func (_m *MinioHandler) RemoveObject(ctx context.Context, bucketName string, objectName string, opts minio.RemoveObjectOptions) error {
	ret := _m.Called(ctx, bucketName, objectName, opts)

	if len(ret) == 0 {
		panic("no return value specified for RemoveObject")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, minio.RemoveObjectOptions) error); ok {
		r0 = rf(ctx, bucketName, objectName, opts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MinioHandler_RemoveObject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveObject'
type MinioHandler_RemoveObject_Call struct {
	*mock.Call
}

// RemoveObject is a helper method to define mock.On call
//   - ctx context.Context
//   - bucketName string
//   - objectName string
//   - opts minio.RemoveObjectOptions
func (_e *MinioHandler_Expecter) RemoveObject(ctx interface{}, bucketName interface{}, objectName interface{}, opts interface{}) *MinioHandler_RemoveObject_Call {
	return &MinioHandler_RemoveObject_Call{Call: _e.mock.On("RemoveObject", ctx, bucketName, objectName, opts)}
}

func (_c *MinioHandler_RemoveObject_Call) Run(run func(ctx context.Context, bucketName string, objectName string, opts minio.RemoveObjectOptions)) *MinioHandler_RemoveObject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(minio.RemoveObjectOptions))
	})
	return _c
}

func (_c *MinioHandler_RemoveObject_Call) Return(_a0 error) *MinioHandler_RemoveObject_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MinioHandler_RemoveObject_Call) RunAndReturn(run func(context.Context, string, string, minio.RemoveObjectOptions) error) *MinioHandler_RemoveObject_Call {
	_c.Call.Return(run)
	return _c
}

// StatObject provides a mock function with given fields: ctx, bucketName, objectName, opts
func (_m *MinioHandler) StatObject(ctx context.Context, bucketName string, objectName string, opts minio.GetObjectOptions) (minio.ObjectInfo, error) {
	ret := _m.Called(ctx, bucketName, objectName, opts)

	if len(ret) == 0 {
		panic("no return value specified for StatObject")
	}

	var r0 minio.ObjectInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, minio.GetObjectOptions) (minio.ObjectInfo, error)); ok {
		return rf(ctx, bucketName, objectName, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, minio.GetObjectOptions) minio.ObjectInfo); ok {
		r0 = rf(ctx, bucketName, objectName, opts)
	} else {
		r0 = ret.Get(0).(minio.ObjectInfo)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, minio.GetObjectOptions) error); ok {
		r1 = rf(ctx, bucketName, objectName, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MinioHandler_StatObject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StatObject'
type MinioHandler_StatObject_Call struct {
	*mock.Call
}

// StatObject is a helper method to define mock.On call
//   - ctx context.Context
//   - bucketName string
//   - objectName string
//   - opts minio.GetObjectOptions
func (_e *MinioHandler_Expecter) StatObject(ctx interface{}, bucketName interface{}, objectName interface{}, opts interface{}) *MinioHandler_StatObject_Call {
	return &MinioHandler_StatObject_Call{Call: _e.mock.On("StatObject", ctx, bucketName, objectName, opts)}
}

func (_c *MinioHandler_StatObject_Call) Run(run func(ctx context.Context, bucketName string, objectName string, opts minio.GetObjectOptions)) *MinioHandler_StatObject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(minio.GetObjectOptions))
	})
	return _c
}

func (_c *MinioHandler_StatObject_Call) Return(_a0 minio.ObjectInfo, _a1 error) *MinioHandler_StatObject_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MinioHandler_StatObject_Call) RunAndReturn(run func(context.Context, string, string, minio.GetObjectOptions) (minio.ObjectInfo, error)) *MinioHandler_StatObject_Call {
	_c.Call.Return(run)
	return _c
}

// NewMinioHandler creates a new instance of MinioHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMinioHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MinioHandler {
	mock := &MinioHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
